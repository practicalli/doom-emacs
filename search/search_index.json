{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Practicalli Doom Emacs","text":"<p>Practicalli Doom Emacs is a guide to Clojure REPL Driven Development with Doom Emacs configuration and Practicalli customization.</p> <p>Doom is not aimed at Emacs beginners (unless the aim is to learn Emacs in more depth).  There is limited official documentation, although there is a healthy community support.</p> Looking for a batteries included approach? <p>Practicalli Spacemacs and practicalli/spacemacs.d provide all the Emacs features needed for Clojure, with just two Git clone commands.  Spacemacs is a community configuration for Emacs with a very large community and very detailed documentation.</p> Book development on hold <p>Practicalli Doom Emacs and its associated configuration project are currently on hold as Doom Emacs is not currently used by Practicalli.</p> <p>The book was started in December 2022 with little knowledge of Doom Emacs, so is mostly a journal of things that have been learned as Practicalli tries to create an effective development workflow, especially with Clojure.  </p> <p>Should Practicalli use Doom Emacs regularly again then further content will be added as new things are discovered, to aid in the learning and effective use of Doom Emacs.</p>"},{"location":"#practicalli-doom-emacs-configuration","title":"Practicalli Doom Emacs configuration","text":"<p>practicalli/doom-emacs-config repository contains a customised configuration for Clojure development and supporting tools. Browse the repository online or fork / clone the repository</p> Free Desktop XDG ConfigClassic Config <p><pre><code>git clone https://github.com/practicalli/doom-emacs-config.git $XDG_CONFIG_HOME/doom`\n</code></pre> The Practicalli configuration should replace the <code>~/.config/doom/</code> directory created by the <code>doom install</code> command.</p> <p><pre><code>git clone https://github.com/practicalli/doom-emacs-config.git $HOME/.doom.d`\n</code></pre> The Practicalli configuration should replace the <code>~/.doom.d/</code> directory created by the <code>doom install</code> command.</p> <p> </p>"},{"location":"#repl-driven-development","title":"REPL Driven Development","text":"<p>The REPL is the Clojure interactive environment used to create an run all code.  You will quickly get a feel for Clojure by evaluating, breaking, fixing and extending code in the REPL, all the while getting instant feedback on what your code is doing.</p> <p>As we work through code we will discuss the concepts behind Clojure, including functional programming, \"pure\" functions and a stateless approach with persistent data structures, changing state safely, Java interoperability and tooling around Clojure.</p>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Practicalli Clojure for a practical introduction learning Clojure and provides practicalli/clojure-deps-edn configuration to add community tools and common aliases to Clojure CLI.</li> <li>Practicalli YouTube channel - 100+ hours of Clojure related videos</li> <li>Practicalli website blog, books and videos to support your journey into Clojure</li> </ul>"},{"location":"#discussions-and-feedback","title":"Discussions and feedback","text":"<p>Contributions are welcome via GitHub issues and pull requests, or discuss the book on the Clojurians Slack community.</p> <p>practicalli channel - Clojurians Slack Community</p> <p>Free Clojurians slack community account</p>"},{"location":"#navigate-the-book","title":"Navigate the book","text":"<p>Use the mouse or built-in key bindings to navigate the pages of the book</p> <ul> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>Use the search box to quickly find a specific topic</p> <ul> <li>F , S , / : open search dialog</li> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search dialog</li> <li>Enter : follow selected result</li> </ul>"},{"location":"#sponsor-practicalli","title":"Sponsor Practicalli","text":"<p>All sponsorship funds are used to support the continued development of Practicalli series of books and videos, although most work is done at personal cost and time.</p> <p>Thanks to Cognitect, Nubank and a wide range of other sponsors from the Clojure community for your continued support</p>"},{"location":"#creative-commons-license","title":"Creative commons license","text":"This work is licensed under a Creative Commons Attribution 4.0 ShareAlike License (including images &amp; stylesheets)."},{"location":"assets/images/social/","title":"Social Cards","text":"<p>Social Cards are visual previews of the website that are included when sending links via social media platforms.</p> <p>Material for MkDocs is configured to generate beautiful social cards automatically, using the colors, fonts and logos defined in <code>mkdocs.yml</code></p> <p>Generated images are stored in this directory.</p>"},{"location":"basics/","title":"Basic usage","text":"<p>Projects Workspaces Evil Tools</p>"},{"location":"basics/#command-menu","title":"Command Menu","text":"<p>Space is the leader key that opens the main Doom Emacs command menu</p> <p>, is the localleader key that opens a context specific menu, with commands for the current major mode (clojure, markdown, yaml, etc.)</p> <p>Keycast shows key bindings and commands</p> <p>Space t k toggles keycast mode which displays the key bindings and associated command in the mode-line</p>"},{"location":"basics/#line-numbers","title":"Line numbers","text":"<p>Space t l toggles consecutive line numbers</p>"},{"location":"basics/#theme","title":"Theme","text":"<p>Space h t lists the theme names available, select a theme name to change the theme instantly.</p> <p>Confirm Theme should run elisp code</p> <p>Doom prompts to confirm if elisp should be run if included in a theme.  A theme can be marked as safe, so further confirmation is not required.</p>"},{"location":"basics/#zoom-frame-and-text","title":"Zoom Frame and text","text":"<p>Space t b to toggle Doom Big mode which applies <code>doom-big-font</code> to text across all buffers, essentailly scaling the Emacs frame.</p> <p>Leaving Doom Big mode resets the text size to <code>doom-font</code>.  This is the recommended approach to scaling Doom Emacs.</p> Set Doom font sizes in config.el <p>Set a standard size font for general use and a big font for demos, screencasts, pairing, etc.  The following configuration is used in practicalli/doom-emacs-config</p> ~/.config/doom/config.el<pre><code>;; See 'C-h v doom-font' for documentation and more examples of what they accept. For example:\n;;(setq doom-font (font-spec :family \"Fira Code\" :size 12 :weight 'semi-light)\n;;      doom-variable-pitch-font (font-spec :family \"Fira Sans\" :size 13))\n\n(setq doom-font (font-spec :family \"Fira Code\" :size 14)\n      doom-big-font (font-spec :family \"Fira Code\" :size 24)\n      doom-variable-pitch-font (font-spec :family \"Ubuntu\" :size 16))\n</code></pre> <p>Alternatively the text in a specific buffer can be scalled, although this does not scale the mini-buffer and its affects are not applied to any other buffer.</p> <p>Ctrl+x Ctrl++ to increase the size of text in the current buffer</p> <p>Ctrl+x Ctrl+- to decrease the size of text in the current buffer</p> <p>Ctrl+x Ctrl+0 to reest the size of text in the current buffer to the default <code>doom-font</code> size</p>"},{"location":"basics/#files","title":"Files","text":"<p>Space f f to list files in current directory or create relative files and directories</p> <p>Space p f to list files in current project, providing a quick way to open any file in the project by filtering the list</p> <p>Create files and directories</p> <p>Space f f and typing a path and file will create the file and intermediate directories if they do not exist</p>"},{"location":"basics/#format-tools","title":"Format tools","text":"<p>, \" is typically the default format menu if available for a language major mode, calling tools specific to each language.</p> <p>Automatic formatting whilst typing is supported when a language module includes the <code>+lsp</code> feature and a suitable LSP language server has been installed.</p> <p>LSP Language Server install</p> Doom format module to be redeveloped <p>LSP language servers are the most effective way to support formatting in Doom Emacs, as the Doom Emacs Format module is to be rewritten.</p>"},{"location":"basics/#whitespace-cleanup","title":"Whitespace cleanup","text":"<p>Space c w to remove whitespace from end of lines and additional blank lines from the end of the file.</p> <p><code>ws-buttler-mode</code> is enabled by default and removes additional whitespace from changed lines.</p> Markdown exclued from ws-buttler <p>ws-buttler excludes markdow mode from ws-buttler mode (there is a rare case where additional whitespace at the end of lines are used as a visual break)</p> <p>practicalli/doom-emacs-config includes Markdown mode in ws-buttler .config/doom/config.el<pre><code>;; Delete whitespace on save, including in markdow-mode\n(setq ws-butler-global-exempt-modes '(special-mode comint-mode term-mode eshell-mode diff-mode))\n</code></pre></p>"},{"location":"basics/#format-source-code","title":"Format Source Code","text":"<p>Formats source code according to the programming language format:</p> <p>= = formats the current line</p> <p>= formats a selected region</p> <p>&gt; &gt; indents the current line</p> <p>&gt; indents the selected region</p>"},{"location":"basics/#references","title":"References","text":"<ul> <li>Keybind reference sheet - doom discourse</li> <li>Doom Getting Started Guide</li> </ul>"},{"location":"basics/evil-editing/","title":"Evil Editing","text":"<p>Evil provides vim-style multiple editing states, greatly increasing key binding reuse and minimising the need for simultaneous key presses.</p> <p>Doom Emacs provides Evil editing states</p> <ul> <li>normal - for manipulating and navigating existing text (default state)</li> <li>insert - for writing new text</li> <li>visual - for selecting blocks of text</li> </ul> <p>Normal state by default</p> <p>Evil normal state should be used most of the time, unless writing lots of new code or text.</p>"},{"location":"basics/evil-editing/#normal-state","title":"Normal state","text":"<p>j,k,h,l to navigate text, use with Ctrl to navigate menus, with Space w to navigate windows</p>"},{"location":"basics/evil-editing/#insert-state","title":"Insert state","text":"<p>Insert new text (or Del), e.g. when writing new code or documentation</p> <p>The most common keys to enter insert mode from normal mode are:</p> <p>i to insert before the cursor, a to append after the cursor</p> <p>o to insert an new line below the cursor, O to insert a new line after the cursor</p> <p>f d or Esc to leave insert mode and return to normal mode.</p>"},{"location":"basics/evil-editing/#visual-state","title":"Visual state","text":"<p>Select characters, words, lines and regions with visual select.  The background changes color to visually indicate which text is selected</p> <p>v to visually select a region and run commands on the text in that region.  Selection can be done with the navigation keys or motions objects such as word <code>w</code> and locations such as end of line <code>$</code>.</p> <p>Shift+v to visually select by line.  v g g to select from current position to top of file, v G to select from current point to end of file.</p> <p>Ctrl+v to select a region using the <code>hjkl</code> navigation keys, e.g. to select table data.</p> <p>g c on a selected region will add comment characters to the start of each line in the region</p> <p>v ~ toggles the case of the selected text (upper/lower case)</p> <p><code>o</code> to toggle between the left and right side of selection</p>"},{"location":"basics/evil-editing/#evil-surround","title":"Evil surround","text":"<p>S to surround the current character with the given character, i.e. ++double-quotes++</p> <p>v S followed by a character will surrond the visually selected text with that character.</p>"},{"location":"basics/evil-editing/#learn-vim-style-editing","title":"Learn Vim-style editing","text":"<p>Vim-style editing is arguably the most effective way to work with text, supporting changes as much through text manipulation as editing text.  Once practised, vim-style editing is far faster than uni-mode editing.</p> <p>The recommended way to learn vim style editing is to practice and ideally use it for everything you do.</p> <p>Space h T v starts the build in Vim tutorial.  This provides the basic movement of vim and provides an interactive way to practice your skills</p> <p>To help make Vim style editing become a sub-conscious act you should learn to speak Evil</p> <p>Vim Adventures is a web-based game that is an alternative to practising Vim.</p>"},{"location":"basics/evil-editing/#learning-resource-for-evil","title":"Learning resource for Evil","text":"<ul> <li>Graphical Cheatsheet Tutorial</li> <li>Vim quick reference guide</li> <li>Vim Casts</li> </ul>"},{"location":"basics/evil-tools/","title":"Evil Editing tools","text":"<ul> <li>Multiedit - multiple match and replace</li> <li>Multiple cursors - add cursors and edit in paralell</li> </ul>"},{"location":"basics/evil-tools/#multiedit","title":"Multiedit","text":""},{"location":"basics/evil-tools/#multiple-cursors","title":"Multiple cursors","text":"<p>Multiple cursors is most useful where the same changes are required in multiple lines, especially where those lines may be similar in structure but not idential.</p> <p>Line based Evil commands work with multiple cursors, e.g. ++dollar++ to move to end of line, f / F to move forward / backward to a character,</p> <p>g z menu for mutliple cursor menu</p> <p>When changes are vertically aligined, create multiple cursors with vim-style movements:</p> <p>2 4 g z I adds a cursor to the next 24 lines</p> <p>Changes in more random positions benefit from creating 'frozen' cursors in any position that only take key input once switched to mirroring or activated by Evil Insert mode</p> <p>g z z toggle new (frozen) cursors at point. Frozen cursors stay in position until mirroring switched on or switching to insert mode</p> <p>g z t toggle mirroring on and off</p> <p>With visual select:</p> <p>g z I to create curors at start of visual selection region</p> <p>g z A to create curors at end (append) of visual selection region</p> <p>Remove multiple cursors:</p> <p>g z q to cancel all cursors</p>"},{"location":"basics/getting-help/","title":"Getting Help with Doom Emacs","text":"<p>The main places to get help with Doom Emacs seem to be:</p> <ul> <li>Doom Emacs built-in docs - sparse but useful when present</li> <li>Discorse - community frequently asked questions - search for previous discussions</li> <li>Discord - chat based help from the community</li> </ul>"},{"location":"basics/getting-help/#doom-emacs-built-in-docs","title":"Doom Emacs Built-in docs","text":"<p>Space h d h opens a list of available documentation, Ctrl j / k to scroll through the list or type a pattern to narrow the list.</p> <p>Enter opens the highlighted documentation in a new buffer</p> <p>Not everything is documentation in detail in Doom, but the built-in documentation is a good starting place.</p>"},{"location":"basics/getting-help/#doom-discourse","title":"Doom Discourse","text":"<p>Doom Discourse website provides guides and tutorials for using Doom Emacs.</p> <p>Questions can also be asked on Discourse in the <code>#doom-help</code> channel, althought Practicalli had more success using Discord for questions.</p> <p>Use Discourse as Extended Docs</p> <p>Search discourse for previous discussions which can often fill in for missing Doom documentation. If the topic is not covered in Doom Discourse then ask questions in Discord.</p>"},{"location":"basics/getting-help/#discord","title":"Discord","text":"<p>Doom Discord community is a chat website that can also be accessed via the Discord application.</p> <p>Discord was found to be most useful for asking questions once the built-in docs and Doom Discourse had been searched.</p>"},{"location":"basics/getting-help/#clojurians-slack","title":"Clojurians Slack","text":"<p>The <code>#doom-emacs</code> channel on the Clojurians Slack is similar to Discord, although with far fewer members.  Unless its a Clojure &amp; Doom specific question then probably better to ask on Discord.</p>"},{"location":"basics/getting-help/#stack-overflow","title":"Stack Overflow","text":"<p>Stack Overflow has an <code>emacs</code> tag, and a more specific <code>doom</code> tag with far fewer questions (but perhaps more relevant) nothing specific for Doom Emacs.</p> <p>Search using the emacs tag including Doom in the patter to help find relevant articles</p> <p>There are a large number of general Emacs questions under the emacs tag.</p>"},{"location":"basics/projects/","title":"Working with Projects","text":"<p>Space p a to add a new project to Doom, selecting the directory path for the root of the project.</p> <p>Space p p to switch to a project other than the current, list shows all other projects except current project. </p> <p>A project is automatically assigned a workspace when opened. Space Tab r to rename the workspace</p> <p>Space l l to list all current workspaces and select a different workspace.</p> <p>Space ++back-tick++ to switch to previous buffer</p> <p>Space Tab ++back-tick++ to switch to previous workspace</p> <p>TODO: paste kill ring cycle - paste transient state in spacemacs</p>"},{"location":"basics/projects/#discover-projects","title":"Discover projects","text":"<p>Space p D to discover projects withing the directories specified in <code>projectile-project-search-path</code></p> <pre><code>(setq projectile-project-search-path '((\"~/projects\" . 2) (\"~/.config\" . 1)))\n</code></pre>"},{"location":"basics/projects/#files","title":"Files","text":"<p>Space u Space f f</p> <p>Space f f to open or create a new file. If a file is open in the current buffer, its path is used as the starting point. To create a file (and intermediate directories), type any additional path and file name.</p> <p>Space p f to list all files in the current project / workspace. Use this when you know the name of the project but not the path or to avoid navigating to the correct path.</p> Project Cache Outdated <p>Space p i to udate the project cache moving directories and files, otherwise Doom will open a buffer for the old location</p> <p>Space u before a file command will also clear the cache and allow correct selection of files, e.g.</p> <p>Space u Space f f</p>"},{"location":"basics/projects/#file-diffs","title":"File diffs","text":"<p>Space f e runs ediff to compare 2 files, prompting to select each file in turn. j k to navigate the differences between each file. a to copy change from first file to second. b to copy change from second file to first.</p> <p>Space f 3 runs ediff to compare 3 files.</p>"},{"location":"basics/projects/#windows","title":"Windows","text":"<p>Space w and one of h j k l for vim-style navigation of windows</p> <p>Space w v to create a new vertical window, Space w h for a new horizontal window</p>"},{"location":"basics/projects/#sessions","title":"Sessions","text":"<p>spc q s to save the current session, which should load when (re)starting Emacs</p>"},{"location":"basics/projects/#searching-across-a-project","title":"Searching across a project","text":"<p>Space / to search across all files in a project, using ripgrep (if installed on OS execution path)</p> <p>Ctrl+c+Ctrl+e opens search results in a separate buffer for editing results.</p> <p>Ctrl+c+Ctrl+c or Z Z to commit changes</p> <p>Narrow search results with Ripgrep switches</p> <p>Use ripgrep switches before or after a search pattern, E.g. #-t clojure -- test or #test -- -t clojure.</p> <p><code>rg --type-list</code> for comprehensive list of types supported by Ripgrep.  Types can represent one or more file extensions.</p> <p><code>#test -- -t clojure</code>  only search for Clojure files (.clj, .cljc, .cljs, .cljx file extension )</p> <p><code>#test -- -g*.tar.gz</code> - search any file that matches a glob, i.e. file extension .tar.gz</p> <p><code>#test#!cd</code> - search for test and filter results containing <code>cd</code> using consult sub-search feature</p> <p>Everything before the second # is filtered by ripgrep.</p> <p>Everything after the second # is filtered by Vertico using Orderless 23, where ! (negatation), = (literal), ~ (fuzzy), % (case insensitive) prefixes are supported.</p> <p># delimiter can be replaced with any arbitrary character. E.g. %test%!cd or test!cd, useful when the search pattern starts with a <code>#</code> character</p>"},{"location":"basics/snippets/","title":"snippets","text":"<p>Yasnippets is provided by the <code>snippets</code> module</p> <p>Add snippets to the <code>.config/doom/snippets</code> directory, under a directory named after the major mode in which the snippet should be available, e.g. clojure snippets should be saved in the <code>.config/doom/clojure-mode/</code> directory.</p>"},{"location":"basics/snippets/#creating-snippets","title":"Creating snippets","text":"<p>Ctrl+c Ctrl+n to create a new snippet in the current major mode (although that can be changed when saving the snippet)</p> <p>Visually select text before creating the snippet to create a snippet from that text.</p> <p>Edit the snippet using tab stops and place holders</p> <p>Ctrl+c Ctrl+c to commit the snippet, prompting for comfirmation of the major mode and if the snippet file should be saved.</p> <p>Creating custom yasnippets</p> <p>A Practicalli detailed guide to writing snippets with yasnippet </p>"},{"location":"basics/snippets/#clojure-lsp-snippets","title":"Clojure LSP snippets","text":"<p>Enable the <code>lsp</code> and <code>clojure</code> adding lsp as an option</p> <pre><code>lsp\n(clojure +lsp)\n</code></pre> <p>Clojure LSP contains its own snippets.</p> <p>practicalli/clojure-lsp-config containes a range of snippets designed by Practicalli and used regularly. Add this configuration to <code>.config/clojure-lsp</code> or copy specific snippets to your clojure LSP configuration in the <code>:additionaal-snippets</code> key.</p>"},{"location":"basics/snippets/#adding-custom-snippets","title":"Adding custom snippets","text":"<p>Custom snippets for Clojure LSP</p> <p>A Practicalli detailed guide for writing custom snippets for Clojure LSP</p> <p>Edit the <code>config.edn</code> file.</p> <p>The <code>:additional-snippets</code> key has a collection of hash-maps, with each hash-map representing a snippet.</p> <p><code>$n</code> represents a tab-stop, where the <code>TAB</code> key will jump throughout the snippet. <code>n</code> is an integer number to define the order of the tab-stops, e.g. <code>$1</code>, <code>$2</code>, $3.</p> <p><code>$0</code> is a special tab-stop that denotes the end of the tab-stops, ending the snippet interaction.</p> <p><code>${n:placeholder text}</code> allows text to be placed at the tab-stop to give an indication as to the value to be completed. The placeholder text is automatically highlighted when tabbing into the tab-stop, so typing a new value replaces the placeholder text.</p> <p>Highlighting and replacing the text does not work for the <code>$0</code> tab-stop, so placeholder text should not be used with this specific tab-stop.</p>"},{"location":"basics/speaking-evil/","title":"Speaking Evil","text":"<p>Evil is easier to learn if you learn to speak commands as sentences.</p> <p>First learn some verbs:</p> <p><code>c</code> (change), <code>d</code> (delete), <code>g</code> go, <code>v</code> visual (select), <code>y</code> yank (copy)</p> <p>Then use those verbs with some modifiers (motions)</p> <p><code>'</code> mark, <code>{ }</code> beginning/end of paragraph, <code>a</code> around, <code>f</code> find (includes character), <code>i</code> inside, <code>s</code> surround, <code>t</code> till (just before a character)</p> <p>Then learn the text objects you can apply verbs and modifiers too</p> <p><code>b</code> block/parentheses, <code>p</code> paragraph, <code>s</code> sentence  <code>t</code> tag - html/xml, <code>w</code> word</p>"},{"location":"basics/speaking-evil/#examples-of-speaking-evil","title":"Examples of speaking Evil","text":"<p>Practice speaking evil with these examples</p> Keybinding Description <code>c i s</code> change inside current sentence (change the whole sentence) <code>c i \"</code> change inside double quotes <code>c f )</code> change from cursor to next <code>)</code> character <code>c s ' \"</code> change by the surrounding single quotes with double quotes <code>c t X</code> change till the character <code>X</code> (not including <code>X</code>) <code>c /foo</code> change until the first search result of \u2018foo\u2019 <code>d d</code> delete current line <code>d i w</code> delete inside the current word (delete word) <code>v t SPC</code> visual select till the next <code>Space</code> character <code>v s ]</code> visually select and surround with <code>[]</code> without spaces <code>v s [</code> as above with <code>[ ]</code> with spaces between parens and content <code>g v</code> go to last visual selection (select last visual selection) <code>v a p</code> visually select around current paragraph <code>SPC v s \"</code> visually select current work and surround with <code>\"\"</code> <code>v i w s \"</code> visually select, insert around current word, and surround with quotes <code>y y</code> yank (copy) current line <code>y w</code> yank (copy) current word <code>y @ a</code> yank (copy) to mark <code>a</code> (<code>m a</code> creates a mark called <code>a</code>) <p>Evil Reference and Tips</p> <p>Evil quick reference guide Evil tips for developers Speaking Vim</p>"},{"location":"basics/structural-editing/","title":"Structural Editing with Smartparens","text":"Smartparens enabled by default <p>Smartparens package is enabled by default in Doom emacs <code>emacs title=\".config/doom/init.el :config (default +bindings +smartparens)</code></p>"},{"location":"basics/structural-editing/#key-bindins","title":"Key bindins","text":"<p>TODO: documentation copied from Spacemacs to be reviewed</p>"},{"location":"basics/structural-editing/#navigation","title":"Navigation","text":"<p>| Key binding | Description                                                             | |-------------+-------------------------------------------------------------------------| |             | Forward + Backward pairs                                                | |-------------+-------------------------------------------------------------------------| | ~SPC k j~   | go forward to next closing parenthesis                                  | | ~SPC k k~   | go backward to previous opening parenthesis                             | | ~SPC k l~   | go forward to next symbol                                               | | ~SPC k h~   | go backward to previous symbol                                          | | ~SPC k L~   | go forward to next sexp                                                 | | ~SPC k H~   | go backward to previous sexp                                            | | ~SPC k $~   | go forward to the end of current sexp                                   | | ~SPC k 0~   | go backward to the beginning of current sexp                            | |-------------+-------------------------------------------------------------------------| |             | Other                                                                   | |-------------+-------------------------------------------------------------------------| | ~SPC k U~   | go \"up\": to parent sexp backward                                        | | ~SPC k %~   | go to other paren of the same pair                                      | | ~SPC k I~   | go back to beginning of current expression and switch to =insert= state |</p>"},{"location":"basics/structural-editing/#manipulation","title":"Manipulation:","text":"<p>| Key binding | Description                                                  | |-------------+--------------------------------------------------------------| | ~SPC k s~   | slurp forward: ~a (bs) c~ -&gt; ~a (bs c)~                      | | ~SPC k S~   | slurp backward: ~a (bs) c~ -&gt; ~(a bs) c~                     | | ~SPC k b~   | barf forward: ~(a bs c)~ -&gt; ~(a bs) c~                       | | ~SPC k B~   | barf backward: ~(a bs c)~ -&gt; ~a (bs c)~                      | | ~SPC k a~   | absorb: ~(a (bs  ..))~ -&gt; ~((bs a  ..))~       | | ~SPC k c~   | convolute: ~(as (bs  ..))~ -&gt; ~(bs (as  ..))~  | | ~SPC k t~   | transpose: ~(as  bs)~ -&gt; ~(bs  as)~            | | ~SPC k J~   | join: ~(as)  (bs)~ -&gt; ~(as  bs)~               | |-------------+--------------------------------------------------------------| |             | Hybrid (= better for non-Lisp languages) commands            | |-------------+--------------------------------------------------------------| | ~SPC k <code>s~ | hybrid slurp forward                                         | | ~SPC k</code> p~ | hybrid push: ~as bs~ -&gt; ~bs as~                | | ~SPC k ` t~ | hybrid transpose: ~as  bs~ -&gt; ~bs  as~         | |-------------+--------------------------------------------------------------| | Note 1:     | ~xs~ is one or multiple sexp, ~x~ is a single sexp           | | Note 2:     | point is at  when presented, or in the list otherwise |"},{"location":"basics/structural-editing/#insertion","title":"Insertion:","text":"<p>| Key binding | Description                    | |-------------+--------------------------------| | ~SPC k (~   | insert sexp before current one | | ~SPC k )~   | insert sexp after current one  | | ~SPC k w~   | wrap a symbol with parenthesis |</p>"},{"location":"basics/structural-editing/#deletion","title":"Deletion:","text":"<p>| Key binding | Description                                                         | |-------------+---------------------------------------------------------------------| | ~SPC k ds~  | delete symbol                                                       | | ~SPC k Ds~  | delete symbol backward                                              | | ~SPC k dw~  | delete word                                                         | | ~SPC k Dw~  | delete word backward                                                | | ~SPC k dx~  | delete sexp: ~(as  a ..)~ -&gt; ~(as  ..)~               | | ~SPC k Dx~  | delete sexp backward: ~(as a  ..)~ -&gt; ~(as  ..)~      | | ~SPC k e~   | splice, killing forward: ~(as (bs  cs) ds)~ -&gt; ~(as bs ds)~  | | ~SPC k E~   | splice, killing backward: ~(as (bs  cs) ds)~ -&gt; ~(as cs ds)~ | | ~SPC k r~   | raise: ~(as  b ..)~ -&gt; ~b~                            | | ~SPC k W~   | unwrap sexp: ~(as)~ -&gt; ~as~                                         | |-------------+---------------------------------------------------------------------| |             | Hybrid (= better for non-Lisp languages) commands                   | |-------------+---------------------------------------------------------------------| | ~SPC k ` k~ | hybrid delete sexp                                                  | |-------------+---------------------------------------------------------------------| | Note 1:     | ~xs~ is one or multiple sexp, ~x~ is a single sexp                  | | Note 2:     | point is at ~~ when presented, or in the list otherwise      |"},{"location":"basics/vim-quick-reference/","title":"Vim Quick Reference","text":"<p>A reference of the most common keybindings available in Vim Normal mode.</p> <p>. repeats the last keybinding sequence used in Vim Normal mode or a change made within a complete Vim Insert session.</p>"},{"location":"basics/vim-quick-reference/#moving-around","title":"Moving around","text":"<p>In normal mode you can keep your fingers resting on the main row of your keyboard to move around.</p> Key action h move cursor left one character j move cursor down one line k move cursor up one line l move cursor right one character <p>Ctrl k / j to move the cursor up or down in a menu.</p>"},{"location":"basics/vim-quick-reference/#navigating-the-current-line","title":"Navigating the current line","text":"Key Action <code>f</code> to next character (you specify) <code>t</code> to just before the next character <code>;</code> repeat <code>f</code> or <code>t</code> search <code>w</code> start of next word <code>W</code> start of next word, white space delimited <code>e</code> end of current word <code>b</code> start of previous word <code>W</code> end of next word, white space delimited <code>*</code> to next matching symbol name <code>$</code> end of current line <code>0</code> start of current line <code>^</code> start of non-whitespace <code>%</code> jump to matching parens or next closed paren"},{"location":"basics/vim-quick-reference/#navigating-the-current-buffer","title":"Navigating the current buffer","text":"Key action <code>gg</code> start of buffer <code>G</code> end of buffer <code>H</code> move cursor to head of buffer <code>M</code> move cursor to middle of buffer <code>L</code> move cursor to bottom line of buffer <code>C-u</code> jump up half a page <code>C-d</code> jump down half a page <code>}</code> move cursor forward by paragraph or block <code>{</code> move cursor backward by paragraph or block <code>ma</code> mark a line in a file with marker \"a\" <code>`a</code> after moving around, go back to the exact position of marker \"a\" <code>'a</code> after moving around, go back to line of marker \"a\" <code>:marks</code> view all the marks <code>''</code> go to the last place you were <code>[{</code> jump back to the \"{\" at the beginning of the current code block <code>SPC j i</code> jump using helm list of headings / functions <code>SPC j j</code> avy-jump to character (specify) <code>SPC j l</code> avy-jump to line <code>C-o</code> jump back to previous cursor location (<code>evil-jump-backwards</code>) <code>C-i</code> Go to newer position in jump list (opposite of <code>C-o</code>) <code>: 4</code> go to line 4"},{"location":"basics/vim-quick-reference/#searching","title":"Searching","text":"<p>/ for a basic search for the current buffer</p> <p>Space s b for a buffer search with popup results that can be navigated with Ctrl j / k</p> <p>Space / to search across the current project.  Matches are listed in a popup buffer.</p> <ul> <li>Ctrl+c Ctrl+e opens the search results in an editable buffer.</li> <li>Ctrl+c Ctrl+c to commit changes</li> <li>Ctrl+c Ctrl+k to cancel changes.</li> </ul> <p>Boundary for search pattern</p> <p><code>\\b</code> defines a boundary around the search term, limiting the matches to full word. For example <code>search\\b</code> will match search, but not searching.</p> Key Action <code>*</code> search forward for the word under the cursor <code>#</code> search backward for the word under the cursor <code>/</code> search forward in current buffer <code>?</code> search backward in current buffer <code>n</code> once searching: find forward <code>N</code> once searching: find backwards"},{"location":"basics/vim-quick-reference/#text-editing","title":"Text Editing","text":"<p>The following commands put you into the Evil Insert state</p> Key Action <code>i</code> insert state at cursor <code>I</code> insert state at start of line <code>a</code> append - insert state after cursor <code>A</code> append - insert state at end of line <code>o</code> new line after cursor <code>O</code> new line before cursor"},{"location":"basics/vim-quick-reference/#return-to-normal-state","title":"Return to Normal state","text":"<p>normal should be the state used most of the time, except when adding new text in insert  state. As soon as typing new text is done, form a habit of switching back to normal state.</p> <p>Esc or press f d keys in extremely quick succession, to switching from insert to normal state.</p> fd - Evil Escape shortcut <p>practicalli/doom-emacs-config sets evil escape key binding to <code>fd</code></p> <p><code>emacs title=\".config/doom/+bindings.el (after! evil-escape   (setq evil-escape-key-sequence \"fd\"))</code> f d in rapid succession is low risk alternative to pressing Esc as if not typed correctly then either the next <code>d</code> character is searched for on the current line (as <code>f</code> moves to the next character), or nothing happens.</p> <p>u to undo any unwanted results</p>"},{"location":"basics/vim-quick-reference/#copy-cut-paste-undo-redo","title":"Copy, cut, paste, undo, redo","text":"<p><code>v</code> in Vim normal mode changes to Visual select mode.  Use the navigation keys or any other movement keys to select text to copy or cut.</p> Key Action y copy (yank) selection and add to kill ring x delete character at point and add to kill ring X delete character before point and add to kill ring p paste last entry from kill ring p Meta+y paste with kill-ring history menu u undo Ctrl+r redo Space i y insert value from kill ring history <p>Undo tips</p> <p>Undo reverts the last action in normal mode or all the changes made in insert state</p>"},{"location":"basics/vim-quick-reference/#replace-and-changing-text","title":"Replace and changing text","text":"Key Action <code>r</code> replace the character under cursor <code>R</code> replace multiple characters until <code>ESC</code> <code>cw</code> change word from cursor to end <code>4 c w</code> change 4 words <code>v e</code> select from cursor to end of word <code>v i w</code> select current word anywhere within the word <code>v i w c</code> change current word/region <code>v i w d</code> delete current word/region <code>d e</code> delete from cursor to end of word <code>d w</code> delete from cursor to start of next word <code>C</code> change from cursor to end of line <code>D</code> delete from cursor to end of line <code>d $</code> delete from cursor to end of line"},{"location":"basics/vim-quick-reference/#delete-commands","title":"Delete commands","text":"Key Action <code>de</code> delete to end of word, not including space <code>dw</code> delete to end of word, including space <code>d$</code> delete to end of line <code>dd</code> delete the current line <code>4 d w</code> delete 4 words <code>4 d $</code> delete 4 lines to end <code>dt</code> delete to a character (not including character) <code>dab</code> delete a whole block / expression <code>dib</code> delete contents of a block / expression <code>cab</code> change all the block / expression <code>cib</code> change inner block contents / expression <code>yab</code> yank all block / expression <code>yib</code> yank inner block contents / expression"},{"location":"basics/vim-quick-reference/#repeat-commands","title":"Repeat commands","text":"Key Action <code>.</code> repeat last command again <code>&lt;number&gt; &lt;cmd&gt;</code> repeat command a number of times <p>The <code>.</code> keybinding will repeat the last command in normal mode or the last text edit in insert mode.</p> <p>Type a number before a command and that command will run that number of times.</p>"},{"location":"basics/vim-quick-reference/#hintinserting-a-comment-border","title":"Hint::Inserting a comment border","text":"<p>Use the number repeat to create a border of 42 <code>;</code> characters. Type <code>42</code> to repeat the command 42 times Press <code>i</code> for insert mode Press <code>;</code> as the character to repeat insert Press <code>ESC</code> or <code>fd</code> to leave insert mode and insert all 42 <code>;</code> characters</p>"},{"location":"basics/vim-quick-reference/#transposing-swap","title":"Transposing / swap","text":"Key Description <code>x p</code> or <code>SPC x t c</code> transpose the current character with the next character <code>SPC x t w</code> transpose the current character with the previous character <code>SPC x t l</code> transpose current line with previous line <code>SPC k tf</code> transpose expression"},{"location":"basics/vim-quick-reference/#comments-works-for-all-major-modes","title":"Comments - works for all major modes","text":"<p><code>SPC ; ;</code> or <code>g c c</code> to comment out the current line</p> <p><code>SPC ;</code> or <code>g c</code> to comment out the currently selected region</p> <p><code>M-;</code> creates a <code>;;</code> comment on an empty line, or <code>;</code> at the end of the text of the current line.</p> <p>To comment multiple lines you can use the repeat command style, especially useful if you are using relative line numbers.</p> <p><code>g c 3 j</code> will comment the current line and the following two lines below.  Comment in reverse using <code>g c 3 k</code>.</p> <p>In Visual state, <code>v</code>, select the lines you wish to comment and use <code>g c</code> to comment all the marked lines.  Partially marked lines are not commented.</p> <p>http://spacemacs.org/layers/+vim/evil-commentary/README.html</p>"},{"location":"basics/vim-quick-reference/#working-with-buffers","title":"Working with Buffers","text":"<p>To work with files in Emacs, they are first loaded into a Buffer.</p> <p>So when you open a file with <code>M-x find file</code> or <code>SPC f f</code> a new buffer is created so you can manage that file.</p> <p>Buffers are displayed in a window and you can change the window to show any of the current buffers.</p> <p>Here are the most commonly used buffer commands</p> Key Command Description <code>SPC b b</code> helm-mini List current buffers <code>SPC b d</code> kill-this-buffer Kill current buffer <code>SPC b h</code> home Switch to Spacemacs home page <code>SPC b n</code> next-buffer Switch to next buffer <code>SPC b p</code> previous-buffer Switch to previous buffer <code>SPC b s</code> switch-to-scratch-buffer Switch to the scratch buffer <code>SPC b Y</code> copy-whole-buffer-to-clipboard Copy current buffer contents to kill ring <p>See the full buffer menu via <code>SPC b</code></p> <p></p>"},{"location":"basics/vim-quick-reference/#managing-files","title":"Managing Files","text":"Key Description <code>SPC f c</code> copy file - save current buffer with a new file name <code>SPC f R</code> change file name of current buffer <code>SPC f y n</code> yank file name of current buffer <p>Also consider using treemacs and projectile</p>"},{"location":"basics/vim-quick-reference/#quit-or-restart-emacs","title":"Quit or Restart Emacs","text":"<p>I recommend using the Spacemacs menu from normal mode to quit / restart Spacemacs.</p> Key Action <code>SPC q q</code> Quit Spacemacs <code>SPS q r</code> Restart Spacemacs keeping current window and buffer layout <code>SPS q R</code> Restart Spacemacs"},{"location":"basics/vim-quick-reference/#hintwork-in-progress-sorry","title":"Hint::Work in progress - sorry","text":"<p>The rest of this section is work in progress and a little messy.</p>"},{"location":"basics/vim-quick-reference/#classic-vim-commands","title":"Classic Vim commands","text":""},{"location":"basics/vim-quick-reference/#todoreference-section","title":"Todo::Reference section","text":"<p>The classic vim commands are also available, however, I dont think they are as nice to learn.  Adding as reference for those used to Vim already and would miss them.</p>"},{"location":"basics/vim-quick-reference/#substitution","title":"Substitution","text":"key Action <code>:s/old/new</code> substitute new for the first old pattern <code>:s/old/new/g</code> substitute new for all 'old's on a line <code>:#,#s/old/new/g</code> substitute phrases between two line #'s type <code>:%s/old/new/g</code> substitute all occurrences in the file <code>:%s/old/new/gc</code> as above, asking for confirmation each time"},{"location":"basics/vim-quick-reference/#external-commands","title":"External commands","text":"<p>You can run external commands using <code>:!</code> followed by a command.  For example:</p> <p><code>:!ls</code> - run the <code>ls</code> command</p> <p>Spacemacs shell can be configured to pop-up a shell buffer to run commands from the directory of the current buffer.</p>"},{"location":"basics/vim-quick-reference/#spelling-checking","title":"Spelling Checking","text":"<p>As you are typing in any(?) buffer then Spacemacs is checking your spelling as you type.  If you type a word that Spacemacs does not recognise then that word is underscored in red.  To correct a spelling:</p> <ul> <li>Move to the word that is incorrectly spelt</li> <li><code>SPC S c</code> to change the word and show a list of suggested words</li> <li>Either type in a new spelling or use <code>C-j</code> and <code>C-k</code> keys to move down and back up the list of words, using <code>RET</code> to select that word.</li> </ul>"},{"location":"basics/vim-quick-reference/#scrolling","title":"Scrolling","text":"<p>In evil command mode you can scroll just the text using the classic vi bindings.  This does not scroll the cursor unless the cursor hist the top or bottom of the window, in which case the cursor stays at that window boundary.</p> <ul> <li><code>C-y</code> - scroll down</li> <li><code>C-e</code> - scroll text up</li> </ul>"},{"location":"basics/vim-quick-reference/#jump-around","title":"Jump around","text":"<p><code>SPC j i</code> shows imenu that lists all the def and defn expressions in the current buffer, allowing you to jump to one of these definitions directly by typing its name or using <code>C-j</code> and <code>C-k</code> to select the name and pressing <code>RET</code> to jump to the name in the buffer</p> <p><code>SPC j l</code> labels each line of the buffer with a short, unique character code.  By entering the character code you are taken directly to the specific line.  This is the <code>avy goto line</code> function and this works on all visible buffers by default, although it can be just shown on the current buffer (TODO: how is this set).</p>"},{"location":"basics/vim-quick-reference/#searching_1","title":"Searching","text":"<p>Search with <code>SPC /</code></p>"},{"location":"basics/workspaces/","title":"Using Workspaces","text":"<p>Multiple workspaces are a convienient way to manage working with different projects.</p> <p>Space l is the workspace menu from practicalli/doom-emacs-config (Space Tab in Doom Emacs)</p> <p>Space p p and selecting a project will open the project within a workspace</p> <p>Space l l lists existing workflows</p> <p>Space l Tab jumps to the last open workspace (use to toggle between two projects)</p> <p>Space l d displays existing workflows as tabs at the bottom of the frame</p>"},{"location":"basics/workspaces/#isolated-buffer-list","title":"Isolated buffer-list","text":"<p>Space b b is workspace-restricted, showing open buffers only from the scope of the current workspace (projeect). </p> <p>Space b B shows the global list of buffers, along with any typically hidden buffers, e.g. <code>*messages*</code> </p>"},{"location":"basics/workspaces/#automatic-workspaces","title":"Automatic workspaces","text":"<p>A workspace is automatically created (and switched to) when you:</p> <ul> <li>Create a new frame with <code>make-frame</code></li> <li>Switch to a project using <code>projectile-switch-project</code></li> </ul>"},{"location":"basics/workspaces/#session-persistence","title":"Session persistence","text":"<p>Space q s to save the current session, including open workspaces and buffers, to , <code>~/.config/emacs/.local/etc/workspaces/autosave</code>. Space q s to choose a different file to save the session.</p> <p>Space q L (~+workspace/load-session~) to load a previous session</p> <p>You can supply either a name to load a specific session to replace your current one.</p>"},{"location":"basics/workspaces/#workspace-persistence","title":"Workspace persistence","text":"<p>Space l s (~+workspace/save~) to save the current workspace to a file.  If workspaces are already saved to file, a prompt appears to confirm keeping the other saved workspaces.</p> <p>Space l l (~+workspace/load~) to load workspaces from the persisted workspace file, <code>~/.config/emacs/.local/etc/workspaces/autosave</code></p> <p>Space l L to load a workspace that was previously created in the current session but was not loaded automatically</p>"},{"location":"basics/workspaces/#commands","title":"Commands","text":"<p>Default keybindings (defined in <code>/config/default/+evil-bindings.el</code></p> command description ~+workspace/new~ Create a new, blank workspace ~+workspace/display~ Display open workspaces in the mode-line ~+workspace/load~ Load a saved workspace into the current session ~+workspace/restore-last-session~ Restore last session ~+workspace/rename~ Rename the current workspace ~+workspace/save~ Save the current workspace to a file ~+workspace/switch-to~ Switch to an open workspace ~+workspace/other~ Switch to last workspace ~+workspace/switch-left~ Switch to previous workspace ~+workspace/switch-right~ Switch to next workspace ~+workspace/delete~ Delete the current workspace ~+workspace/kill-session~ Clears the current session (kills all windows and buffers)"},{"location":"clojure-workflow/","title":"Clojure Developmement Workflow","text":"Aliases used in examples are defined in practicalli/clojure-deps-edn <p>practicalli/clojure-deps-edn contains a wide range of aliases and community tools for Clojure CLI projects.</p> <p><code>:env/dev</code> adds <code>dev</code> directory to the class path, used to load <code>dev/user.clj</code> file and run development tools on REPL startup</p> <p><code>:env/test</code> adds <code>test</code> directory to include unit tests and common testing libraries</p> <p><code>:repl/rebel</code> runs a rich terminal UI and an nREPL server to allow connection from Clojure aware editors</p>"},{"location":"clojure-workflow/#start-clojure-repl","title":"Start Clojure REPL","text":"Command LineDoom Emacs <p>Start a REPL in a terminal window with a rich REPL UI prompt, with auto-completion, syntax highlighting, multi-line editing and documentation. <pre><code>clojure -M:env/dev:env/test:repl/rebel\n</code></pre></p> <p>Or start a headless REPL if only using the REPL via the editor <pre><code>clojure -M:env/dev:env/test:repl/headless\n</code></pre></p> <p>, c to connect to an existing Clojure REPL and follow the prompts to connect to <code>localhost</code></p> <p>Doom Emacs can launch a REPL process and connect to that process without leaving Emacs. External tools (Clojure CLI, Leiningen) are used to actually start the REPL process and CIDER manages the connection and communication with the REPL process from within Doom Emacs.</p> <p>, ' to start a Clojure REPL using <code>cider-jack-in</code></p> <p>Include a <code>.dir-locals.el</code> file in the root of the Clojure project to include Clojure CLI aliases <pre><code>((clojure-mode . ((cider-preferred-build-tool . clojure-cli)\n              (cider-clojure-cli-aliases . \":env/dev:env/test\"))))\n</code></pre></p>"},{"location":"clojure-workflow/#evaluate-code","title":"Evaluate code","text":"<p>, e opens the evaluation menu</p>"},{"location":"clojure-workflow/#snippets","title":"Snippets","text":"<p>Snippets from Yasnippets appear when typing matches the name of the snippet defined in the major mode.</p> <p>Clojure also has snippets defined from Clojure LSP.</p>"},{"location":"install/","title":"Install Doom Emacs","text":"<p>Install prerequisites: Emacs, Java 17, Clojure CLI and Command Line tools </p> <ol> <li>Clone Doom Emacs to <code>~/.config/emacs</code></li> <li>Clone practicalli/doom-emacs-config configuration to add common modules for Clojure development and related languages.  Or edit <code>~/.config/doom/init.el</code> and define the Doom modules required. Follow the Doom configuration section for details.</li> <li>[optional] Install Fira Code font (change <code>dotspacemacs-default-font</code> to a name of a font on your operating system in <code>.spacemacs.d/init.el</code> in step 4) 4.</li> </ol>"},{"location":"install/#clone-doom-emacs","title":"Clone Doom Emacs","text":"<p>Use your favourite git client or the following command in a terminal window to clone Spacemacs and then run the Doom Emacs install script</p> Free Desktop XDG configClassic config <pre><code>git clone https://github.com/hlissner/doom-emacs ~/.config/emacs\n\n~/.config/emacs/bin/doom install\n</code></pre> <p><code>~/.config/doom</code> directory will be created by the install and contain the default configuration.</p> <pre><code>git clone https://github.com/hlissner/doom-emacs ~/.emacs.d\n\n~/.emacs.d/bin/doom install\n</code></pre>"},{"location":"install/#add-doom-command-to-path","title":"Add Doom command to path","text":"<p>Doom provides tools to check the user configuration, <code>doom doctor</code>, and to update modules, <code>`Either add</code>.config/emacs/bin` to the system path</p> Symbolic linkExport PATH <p>Create a symbolic link called doom from the local user bin directory to the Doom Emacs installation bin/doom file <pre><code>ln -s ~/.config/emacs/bin/doom .local/bin/doom\n</code></pre></p> <p>In the user shell configuration file (<code>~/.bashrc</code>, <code>~/.zshenv</code>), export the PATH environment variable and include the path to the Doom Emacs install bin directory <pre><code>export PATH=$PATH:$HOME/.config/emacs/bin\n</code></pre></p>"},{"location":"install/#clone-practicalli-doom-configuration","title":"Clone Practicalli Doom configuration","text":"<p>Remove the autogenerated configuration from the Doom install</p> <pre><code>mv ~/.config/doom ~/.config/doom-backup\n</code></pre> <p>Clone practicalli/doom-emacs-config or first create a fork and clone that fork</p> Free Desktop XDG configClassic config <p>Using SSH <pre><code>git clone git@github.com:practicalli/doom-emacs-config.git ~/.config/doom\n</code></pre></p> <p>Using HTTPS <pre><code>git clone https://github.com/practicalli/doom-emacs-config ~/.config/doom\n</code></pre></p> <p>Using SSH <pre><code>git clone git@github.com:practicalli/doom-emacs-config.git ~/.config/doom\n</code></pre></p> <p>Using HTTP <pre><code>git clone https://github.com/practicalli/doom-emacs-config ~/.config/doom\n</code></pre></p>"},{"location":"install/#check-update-doom-emacs","title":"Check &amp; Update Doom Emacs","text":"<p><code>doom doctor</code> diagnoses common issues with your environment and setup, and may offer clues about what is wrong.</p> <p><code>doom sync</code> ensures Emacs packages are installed, orphaned packages are removed and autoloads/cache files are up to date. </p> <pre><code> doom doctor &amp;&amp; doom sync\n</code></pre> doom doctor - successful output example <p></p>"},{"location":"install/#install-fira-code-font","title":"Install Fira Code font","text":"<p>Install Fira Code</p> <p>practicalli/doom-emacs-config uses Fira Code, a mono-spaced font designed for source code and includes ligatures and many other features.</p> <p></p> <p>Use a different font with practicalli/doom-emacs-config</p> <p>To use a different font when using the practicalli/doom-emacs-config, edit <code>.config/doom/config.el</code> and update the value for <code>doom-font</code> and any variations of fonts required <pre><code>(setq doom-font (font-spec :family \"Fira Code\" :size 14)\n      doom-big-font (font-spec :family \"Fira Code\" :size 24)\n      doom-variable-pitch-font (font-spec :family \"Ubuntu\" :size 16))\n</code></pre></p>"},{"location":"install/#language-servers","title":"Language Servers","text":"<p>Some languages support Language Server Protocol to provide static analysis of code structure and provide live linting and other features.  Each language will require installation of its own language server, most often as a nodejs package.</p> <pre><code>sudo npm install --global vscode-json-languageserver dockerfile-language-server-nodejs vscode-html-languageservice vscode-css-languageservice yaml-language-server\n</code></pre> <p>Or install a language server for the specific language</p> ClojureJSONDockerWebYAML <p>clojure-lsp.io provides the language server implementation for Clojure.  Follow the relevant operating system install guide</p> <p>On Linux machines, Practicalli recommends installing the latest clojure-lsp release to <code>~/.local/bin/</code></p> <p>Add <code>(json +lsp)</code> doom module in <code>.config/doom/init.el</code> and install the JSON language server <pre><code>sudo npm install --global yaml-language-server\n</code></pre></p> <p>Add <code>(docker +lsp)</code> doom module in <code>.config/doom/init.el</code> and install the Dockerfile language server <pre><code>sudo npm install --global dockerfile-language-server-nodejs\n</code></pre></p> <p>Add <code>(web +lsp)</code> doom module in <code>.config/doom/init.el</code> and install the HTML and CSS language servers <pre><code>sudo npm install --global vscode-html-languageservice vscode-css-languageservice\n</code></pre></p> <p>Add <code>(yaml +lsp)</code> doom module in <code>.config/doom/init.el</code> and install the YAML language server <pre><code>sudo npm install --global yaml-language-server\n</code></pre></p>"},{"location":"install/#doom-emacs-ready","title":"Doom Emacs ready","text":"<p>Doom Emacs is and ready to help you take on the world. Run emacs from a desktop launcher or on the command line:</p> <pre><code>emacs\n</code></pre> <p>Native compliation initial high cpu use</p> <p>On first running Emacs after Doom install added packages, the elisp code will be compiled to native binaries.  The compilation will use considerable CPU resources.</p> <p>If you already know how to use Doom Emacs, jump to the Clojure Projects section, otherwise look through the Doom Basics to learn how to use Vim style editing and work with files, buffers and windows.</p>"},{"location":"install/bindings/","title":"Key Bindings","text":"<p>practicalli/doom-emacs-config replaces many of the default Doom key bindings as well as adding more key bindings</p> <p><code>map!</code> Doom macro is used to define new key bindings.  Existing Doom key bindings are replaced by first setting the binding to <code>nil</code> then adding a new definition.</p> <p>Most Practicalli key bindings are defined in the <code>~/.config/doom/+bindings.el</code> configuration file, or in a major mode specific file e.g. <code>~/.config/doom/+clojure.el</code></p> Doom - basic guide to rebinding keys <p>How to rebind keys - Doom Emacs discord</p>"},{"location":"install/bindings/#leader-local-leader","title":"Leader / Local leader","text":"<p>Space is the leader key that opens the which-key menu, driving many of the menu based commands.</p> <p>, replaces the Doom local leader, <code>SPC m</code> which is considered a major mode menu entry under the leader key so not really a shortcut to access the major mode context specific menu.</p> .config/doom/+bindings.el<pre><code>(setq doom-localleader-key \",\")\n</code></pre>"},{"location":"install/bindings/#m-x-emacs-command-list","title":"M-x Emacs command list","text":"<p>Space : is the Doom default to list Emacs commands (<code>M-x</code>), aligning with the <code>:</code> character used to issue vim commands</p> <p>Space Space is <code>M-x</code> in Spacemacs, so practicalli/doom-emacs-config replaces the existing key binding that Doom defines to open a file (provided by <code>SPC f f</code>)</p> .config/doom/+bindings.el<pre><code>(map! :leader\n      \"SPC\" nil\n      :desc \"M-x\" \"SPC\" #'execute-extended-command)\n</code></pre> <p><code>SPC :</code> key binding is kept to allow for migration to the Doom key binding.</p>"},{"location":"install/bindings/#evil-escape","title":"Evil escape","text":"<p><code>fd</code> is used for Evil Escape to provide an alternative to the Esc key that keeps fingers on the home row of the keyboard</p> .config/doom/+bindings.el<pre><code>(after! evil-escape\n  (setq evil-escape-key-sequence \"fd\"))\n</code></pre>"},{"location":"install/bindings/#buffers","title":"Buffers","text":"<p>Space Tab switches to last open buffer, providing a convenient way to toggle between two buffers.</p> <p>Space b Tab added to help discovery of this toggle approach</p> .config/doom/+bindings.el<pre><code>(map! :leader\n         \"TAB\" nil\n         :desc \"Last Buffer\" \"TAB\" #'evil-switch-to-windows-last-buffer)\n\n(map! :leader\n       (:prefix \"b\"\n         :desc \"Dashboard\" \"h\" #'+doom-dashboard/open\n         :desc \"Toggle Last\" \"TAB\" #'evil-switch-to-windows-last-buffer))\n</code></pre> <p>Replaces Doom <code>SPC TAB</code> used for the workspaces menu, which is also replaced by <code>SPC l</code></p>"},{"location":"install/bindings/#workspaces","title":"Workspaces","text":"<p>Space l replaces Doom <code>SPC TAB</code> to open the workspaces menu to align with Spacemacs (layout) approach. This frees <code>SPC TAB</code> to jump to the last open buffer, as in Spacemacs.</p> .config/doom/+bindings.el<pre><code>(map! :leader\n       (:prefix-map (\"TAB\" . nil))\n       (:prefix (\"l\". \"Layouts\")\n         :desc \"Last Layout\" \"&lt;tab&gt;\" #'+workspace/other\n         :desc \"Display Tabs\" \"d\" #'+workspace/display\n         :desc \"Delete layout\" \"D\" #'+workspace/delete\n         :desc \"Layout list\" \"l\" #'+workspace/switch-to\n         :desc \"Load Layout\" \"L\" #'+workspace/load\n         :desc \"New Layout\" \"n\" #'+workspace/new\n         :desc \"Rename Layout\" \"r\" #'+workspace/rename\n         :desc \"Restore session\" \"R\" #'+workspace/restore-last-session\n         :desc \"Save Layout\" \"s\" #'+workspace/save\n         :desc \"Kill Session\" \"x\" #'+workspace/kill-session\n         :desc \"Switch to 0\" \"0\" #'+workspace/switch-to-0\n         :desc \"Switch to 1\" \"1\" #'+workspace/switch-to-1\n         :desc \"Switch to 2\" \"2\" #'+workspace/switch-to-2\n         :desc \"Switch to 3\" \"3\" #'+workspace/switch-to-3\n         :desc \"Switch to 4\" \"4\" #'+workspace/switch-to-4\n         :desc \"Switch to 5\" \"5\" #'+workspace/switch-to-5\n         :desc \"Switch to 6\" \"6\" #'+workspace/switch-to-6\n         :desc \"Switch to 7\" \"7\" #'+workspace/switch-to-7\n         :desc \"Switch to 8\" \"8\" #'+workspace/switch-to-8\n         :desc \"Switch to 9\" \"9\" #'+workspace/switch-to-9))\n</code></pre>"},{"location":"install/bindings/#treemacs","title":"Treemacs","text":"<p>Space p t toggles treemacs project browser from project menu</p> .config/doom/+bindings.el<pre><code>(map! :leader\n      (:prefix \"p\"\n         \"t\" nil  ; disable project todos key binding\n         :desc \"Project browser\" \"t\" #'+treemacs/toggle))\n</code></pre>"},{"location":"install/bindings/#version-control","title":"Version Control","text":"<p>Space g s to call Magit Status, rather than the Doom binding to stage hunk at point</p> <p>Practicalli always uses Magit status menu to manage changes, so adopting the Spacemacs binding.</p> .config/doom/+bindings.el<pre><code>(map! :leader\n      (:prefix \"g\"\n        :desc \"\" \"s\" nil  ; remove existing binding\n        :desc \"Magit Status\" \"s\" #'magit-status))\n</code></pre>"},{"location":"install/clojure-configuration/","title":"Clojure configuration","text":"<p>Enable the Clojure module with LSP support in the <code>~/.config/doom/init.el</code> configuration file</p> <pre><code>(clojure +lsp)\nlsp\n</code></pre> <p>Use the doom command to load the modules</p> <pre><code>doom sync\n</code></pre>"},{"location":"install/clojure-configuration/#cider-configuration","title":"Cider configuration","text":"<p>Define variables to configure CIDER</p> ~/.config/doom/config.el<pre><code>(use-package! cider\n  :after clojure-mode\n  :config\n  (setq cider-show-error-buffer t               ;'only-in-repl\n        cider-font-lock-dynamically nil         ; use lsp semantic tokens\n        cider-eldoc-display-for-symbol-at-point nil ; use lsp\n        cider-prompt-for-symbol nil\n        cider-use-xref nil                      ; use lsp\n\n        cider-repl-pop-to-buffer-on-connect nil ; REPL buffer shown at starup\n        clojure-enable-kaocha-runner t          ; enable Kaocha test runner\n        cider-repl-display-help-banner nil      ; disable help banner\n        cider-print-fn 'puget                   ; pretty printing with sorted keys / set values\n        cider-result-overlay-position 'at-point ; results shown right after expression\n        cider-overlays-use-font-lock t\n        cider-repl-buffer-size-limit 100        ; limit lines shown in REPL buffer\n        cider-repl-history-size 42\n        )\n  (set-lookup-handlers! '(cider-mode cider-repl-mode) nil) ; use lsp\n  (set-popup-rule! \"*cider-test-report*\" :side 'right :width 0.4)\n  (set-popup-rule! \"^\\\\*cider-repl\" :side 'bottom :quit nil)\n  ;; use lsp completion\n  (add-hook 'cider-mode-hook (lambda () (remove-hook 'completion-at-point-functions #'cider-complete-at-point))))\n\n(use-package! clojure-mode\n  :config\n  (setq clojure-indent-style 'align-arguments\n        clojure-align-forms-automatically t\n        clojure-toplevel-inside-comment-form t  ;; evaluate expressions in comment as top level\n))\n</code></pre> <p>Restart Doom Emacs after larger changes</p> <p>Space q r to restart Doom Emacs when significant changes are made or something is not working correctly</p>"},{"location":"install/clojure-configuration/#clojure-cli","title":"Clojure CLI","text":"<p>Practicalli Clojure install guide</p> <p>Clojure CLI provides a way to run Clojure code, packaged Clojure (jar) and of course run a Clojure REPL.</p> <p>Practicalli Clojure install guide details prerequisites, Clojure install options and supporting tools for an enhanced developer workflow.  Or visit the Clojure Getting Started guide for just the Clojure CLI.</p> <p>practicalli/clojure-deps-edn provides a wide range of community tools that can easily be added to the development environment and used across all projects.</p> <p>Aliases are required for many command examples</p> <p>Without installing practicalli/clojure-deps-edn many commands provided in this book will not work, unless the same alias configuration is added to a either a project or user level <code>deps.edn</code> configuration.</p>"},{"location":"install/clojure-configuration/#clojure-lsp","title":"Clojure LSP","text":"<p>Clojure LSP installation guide Practicalli Clojure LSP configuration</p> <p></p> <p>Clojure LSP provides a standard set of features for editing and manipulating source code, e.g. autocompletion, code navigation, refactor code, inline syntax errors and idiom warnings.</p> <p>LSP and the REPL</p> <p>The REPL is used to design Clojure effectively by providing instant feedback on code expressions as they are written and evaluated.  A REPL based workflow supports the most effective approach to development of Clojure apps and services. Clojure LSP supports the editing activities to write Clojure code effectively, providing a static analysis of the code base that drives advance editing, navigation and refactor tasks.</p> <p>Install the Clojure LSP command line tool and configure <code>~./config/clojure-lsp/config.edn</code> or use Practicalli Clojure LSP configuration which provides a complete configuration for clojure-lsp (<code>config.edn</code>), including a wide range of snippets and less restrictive formatting rules (<code>cljfmt.edn</code>).</p> Free Desktop XDG ConfigClassic Config <p>Clone via SSH <pre><code>git clone -o practicalli git@github.com:practicalli/clojure-lsp-config.git $XDG_CONFIG_HOME/clojure-lsp\n</code></pre></p> <p>Clone via HTTPS <pre><code>git clone -o practicalli https://github.com/practicalli/clojure-lsp-config.git $XDG_CONFIG_HOME/clojure-lsp\n</code></pre></p> <p>Clone via SSH <pre><code>git clone -o practicalli git@github.com:practicalli/clojure-lsp-config.git $HOME/.clojure-lsp\n</code></pre></p> <p>Clone via HTTPS <pre><code>git clone -o practicalli https://github.com/practicalli/clojure-lsp-config.git $HOME/.clojure-lsp\n</code></pre></p> <p>Run the clojure-lsp command in a terminal to ensure the install was successful.</p> <pre><code>clojure-lsp -v\n</code></pre> Clojure LSP and clj-kondo <p>Clojure LSP includes clj-kondo to provide an implementation of the Language Server Protocol for the Clojure Language. clj-kondo provides static analysis of source code files, providing subtle warnings as Clojure code is written to help the developer follow idioms and avoid syntatic errors.</p>"},{"location":"install/clojure-configuration/#references","title":"References","text":"<ul> <li>Configure Emacs as a Clojure IDE guide</li> <li>A guide on disabling/enabling lsp-mode features</li> <li>Emacs LSP UI website and emacs-lsp/lsp-ui repository</li> </ul>"},{"location":"install/completion/","title":"Completion with Vertico","text":"<p>Vertico module enhances the Emacs search and completion experience, with united interface for project search and replace, powered by ripgrep</p> <p>The primary packages are:</p> <ul> <li>Vertico - vertical completion user interface</li> <li>Consult - suite of useful commands using ~completing-read~</li> <li>Embark - set of minibuffer actions</li> <li>Marginalia - annotations to completion candidates</li> <li>Orderless - additional filtering methods</li> </ul> <p>Consult can use several external tools which must be installed to use their features</p> <ul> <li>fzf </li> <li>Dash docsets </li> <li>pass </li> </ul>"},{"location":"install/completion/#module-flags","title":"Module flags","text":"<ul> <li> <p>+childframe   Display completion candidates in a child frame rather than an overlay or tooltip. Requires GUI Emacs.</p> </li> <li> <p>+icons ::   Add icons to =file= and =buffer= category completion selections.</p> </li> </ul>"},{"location":"install/completion/#vertico-keybindings","title":"Vertico keybindings","text":"<p>When in an active Vertico completion session, the following doom added keybindings are available:</p> Keybind Description Ctrl+k (evil) Go to previous candidate Ctrl+j (evil) Go to next candidate Ctrl+Meta+k (evil) Go to previous group Ctrl+Meta+j (evil) Go to next group ++ctrl+semi-colon++ or Space a Open an ~embark-act~ menu to chose a useful action Ctrl+c ++ctrl+semi-colon++ export the current candidate list to a buffer Ctrl+c Ctrl+l ~embark-collect~ the current candidate list (collect verbatim) Ctrl+Space Preview the current candidate <p><code>embark-act</code> will prompt you with a =which-key= menu with useful commands on the selected candidate or candidate list, depending on the completion category.</p> <p>Marginalia annotaions on help menu</p> <p>Ctrl+h shows a help menu of options with a Vertico buffer showing more detailed descriptions from Marginalia annotations</p>"},{"location":"install/completion/#jump-to-navigation","title":"Jump-to navigation","text":"<p>Navigate within a project using projectile</p> <p>https://assets.doomemacs.org/completion/vertico/projectile.png</p> Keybind Description Space p f Jump to file in project Space f f Jump to file from current directory Space s i Jump to symbol in file"},{"location":"install/completion/#project-search-replace","title":"Project search &amp; replace","text":"<p>This module provides interactive text search and replace using ripgrep.</p> Keybind Description Space s p Search project Space s P Search another project Space s d Search this directory Space s D Search another directory <p>https://assets.doomemacs.org/completion/vertico/search.png</p> <p>Space u universal argument prefix to commands instructs the search tool to include ignored file patterns.</p> <p>Ctrl+C+Ctrl+e to send the search results to an editable buffer</p> <p>Z Z or Ctrl+C+Ctrl+c to commit changes</p> <p>Z Q or Ctrl+C+Ctrl+k to abort changes</p> <p>https://assets.doomemacs.org/completion/vertico/search-replace.png</p>"},{"location":"install/completion/#in-buffer-searching","title":"In-buffer searching","text":"<p>This module provides some in buffer searching bindings:</p> <ul> <li>[[kbd:][spc s s]] (~isearch~)</li> <li>[[kbd:][spc s S]] (~+vertico/search-symbol-at-point~ via ~consult-line~)</li> <li>[[kbd:][spc s b]] (~consult-line~)</li> </ul> <p>https://assets.doomemacs.org/completion/vertico/buffer-search.png</p> <p>An ~occur-edit~ buffer can be opened from ~consult-line~ with [[kbd:][C-c C-e]].</p>"},{"location":"install/completion/#vertico-integration","title":"Vertico integration","text":"Keybind Description M x or Space : Enhanced M-x Space ++quote++ Resume last Vertico session"},{"location":"install/completion/#jump-to-files-buffers-or-projects","title":"Jump to files, buffers or projects","text":"Keybind Description Space Enter Find bookmark Space f f or Space . Browse from current directory Space p f or Space Space Find file in project Space f f Find recently opened file Space p f Open another project Space b b or Space , Switch to buffer in current workspace Space b B or   Space &lt; Switch to buffer <p>[[kbd:][spc b b]] and [[kbd:][spc ,]] support changing the workspace you're selecting a buffer from via [[https://github.com/minad/consult#narrowing-and-grouping][Consult narrowing]], e.g. if you're on the first workspace, you can switch to selecting a buffer from the third workspace by typing [[kbd:][3 spc]] into the prompt, or the last workspace by typing [[kbd:][0 spc]].</p> <p>[[kbd:][spc f f]] and [[kbd:][spc .]] support exporting to a [[kbd:][wdired]] buffer using [[kbd:][C-c C-e]].</p>"},{"location":"install/completion/#search","title":"Search","text":"<p>| Keybind | Description                               | |---------+-------------------------------------------| | [[kbd:][spc p t]] | List all TODO/FIXMEs in project           | | [[kbd:][spc s b]] | Search the current buffer                 | | [[kbd:][spc s d]] | Search this directory                     | | [[kbd:][spc s D]] | Search another directory                  | | [[kbd:][spc s i]] | Search for symbol in current buffer       | | [[kbd:][spc s p]] | Search project                            | | [[kbd:][spc s P]] | Search another project                    | | [[kbd:][spc s s]] | Search the current buffer (incrementally) |</p>"},{"location":"install/completion/#file-path-completion","title":"* File Path Completion","text":"<p>Note that Emacs allows you to switch directories with shadow paths, for example starting at =/foo/bar/baz=, typing =/foo/bar/baz/~/= will switch the searched path to the home directory. For more information see ~substitute-in-file-name~ and ~file-name-shadow-mode~. This module will erase the \"shadowed\" portion of the path from the minibuffer, so in the previous example the path will be reset to =~/=.</p>"},{"location":"install/completion/#consult","title":"Consult","text":"<ul> <li>Multiple candidate search This module modifies the default keybindings used in ~consult-completing-read-multiple~: | Keybind | Description                                                 | |---------+-------------------------------------------------------------| | [[kbd:][TAB]]     | Select or deselect current candidate                        | | [[kbd:][RET]]     | Enters selected candidates (also toggles current candidate) |</li> </ul>"},{"location":"install/completion/#async-search-commands","title":"* Async search commands","text":"<p>:PROPERTIES: :ID:       4ab16bf0-f9e8-4798-8632-ee7b13d2291e :END: Consult async commands (e.g. ~consult-ripgrep~) will have a preceding separator character (usually ~#~) before the search input. This is known as the =perl= splitting style. Input typed after the separator will be fed to the async command until you type a second seperator, afterwhich the candidate list will be filtered with Emacs instead (and can be filtered using [[doom-package:orderless]], for example). The specific seperator character can be changed by editing it, and might be different if the initial input already contains =#=.</p> <p>Note that grep-like async commands translate the input (between the first and second =#=) to an Orderless-light expression: space separated inputs are all matched in any order. If the grep backend does not support PCRE lookahead, it'll only accept 3 space separated inputs to prevent long lookup times, and further filtering should be done after a second =#=.</p> <p>For more information [[https://github.com/minad/consult#asynchronous-search][see here]].</p>"},{"location":"install/completion/#marginalia","title":"Marginalia","text":"<p>| Keybind | Description                     | |---------+---------------------------------| | [[kbd:][M-A]]     | Cycle between annotation levels |</p> <p>Marginalia annotations for symbols (e.g. [[kbd:][spc h f]] and [[kbd:][spc h v]]) come with extra information the nature of the symbol. For the meaning of the annotations see ~marginalia--symbol-class~.</p>"},{"location":"install/completion/#orderless-filtering","title":"Orderless filtering","text":"<p>When using orderless to filter through candidates, the default behaviour is for each space separated input to match the candidate as a regular expression or literally.</p> <p>Note that due to this style of matching, pressing tab does not expand the input to the longest matching prefix (like shell completion), but rather uses the first matched candidate as input. Filtering further is instead achieved by pressing space and entering another input. In essence, when trying to match =foobar.org=, instead of option 1., use option 2.:</p> <ol> <li>(BAD) Enter ~foo TAB~, completes to =foobar.=, enter ~org RET~</li> <li>(GOOD) Enter ~foo spc org RET~</li> </ol> <p>Doom has some builtin [[https://github.com/oantolin/orderless#style-dispatchers][style dispatchers]] for more fine-grained filtering, which you can use to further specify each space separated input in the following ways: | Input        | Description                              | |--------------+------------------------------------------| | ~!foo~         | match without literal input =foo=          | | ~%foo~ or ~foo%~ | perform ~char-fold-to-regexp~ on input =foo= | | ~<code>foo~ or ~foo</code>~ | match input =foo= as an initialism         | | ~=foo~ or ~foo=~ | match only with literal input =foo=        | | ~~foo~ or ~foo~~ | match input =foo= with fuzzy/flex matching |</p>"},{"location":"install/doom-configuration/","title":"Doom Emacs configuration","text":"<p>Doom curates a large number of modules, a module being one or more Emacs packages with configuration.</p> <p><code>~/.config/doom/</code> contains three configuration files created by the install process.</p> <ul> <li>init.el - enable / disable Doom modules</li> <li>config.el - elisp configuration, setting variables, etc.</li> <li>packages.el - manage specific packages, adding to or overriding packages in the Doom modules</li> </ul> Check parens are balanced in config <p><code>check-parens</code> command will check the current buffer for balanced parens (all open parens have a matching close paren)</p>"},{"location":"install/doom-configuration/#doom-modules","title":"Doom modules","text":"<p>Space h d m to list the built-in Doom module documentation  (NOTE: documentation for some modules can be light or non-existant)</p> <p>Edit <code>.config/doom/init.el</code> to select modules to be included.</p> <p>practicalli/doom-emacs-config has a curated set of modules</p> <p>The most useful modules include:</p> Module Description (clojure +lsp) Cider and Clojure Mode lsp language server support UI (magit +forge) Rich Git Client with Forge Issue &amp; PR support (docker +lsp) editing in many places at once multiple-cursors editing in many places at once"},{"location":"install/doom-configuration/#personal-information","title":"Personal information","text":"<pre><code>(setq auth-sources '(\"~/.authinfo.gpg\")\n      auth-source-cache-expiry nil) ; default is 7200 (2h)\n</code></pre>"},{"location":"install/doom-configuration/#buffers","title":"buffers","text":"<p>Set new buffers to open in org-mode rather than fundamntal-mode</p> <pre><code>(setq-default major-mode 'org-mode)\n</code></pre>"},{"location":"install/doom-configuration/#line-numbers","title":"Line Numbers","text":"<p><code>display-line-numbers-type</code> defines the type of line numbers.</p> <ul> <li><code>nil</code> consecutive line numbering, 1,2,3,...</li> <li><code>relative</code> relative numbers to current line for vim navigation, e.g. <code>24 j</code> to jump down 24 lines.</li> </ul> <p>Set to relative for Vim-style relative numbers, to support jumping lines, e.g. 2 4 J</p> ~/.config/doom/config.el<pre><code>(setq display-line-numbers-type 'relative)\n</code></pre>"},{"location":"install/doom-configuration/#frames","title":"Frames","text":"<p>Space t F toggles the current frame to be full screen</p> <p>Configure Emacs to always start maximized</p> ~/.config/doom/config.el<pre><code>(add-to-list 'default-frame-alist '(fullscreen . maximized))\n</code></pre>"},{"location":"install/doom-configuration/#theme","title":"Theme","text":"<p>Space h T opens a selection menu of all available themes.  Type a theme name or scroll with Ctrl+j and Ctrl+k</p> <p>Enter to select the theme.</p> <p>doom-gruvbox theme is configured in practicalli/doom-emacs-config</p> ~/.config/doom/config.el<pre><code>(setq doom-theme 'doom-gruvbox)\n</code></pre>"},{"location":"install/doom-configuration/#font","title":"Font","text":"<p>++ctrl+equals++ to increase font size, Ctrl+- to decrease fault size.</p> <p>Practicalli recommends Fira Code font which is a very clear font for source code and also supports ligatures. Fira Code  is configured in practicalli/doom-emacs-config</p> <p></p> ~/.config/doom/config.el<pre><code>(setq doom-font (font-spec :family \"Fira Code\" :size 14 :weight 'semi-light))\n</code></pre> <p>TODO: set font for big mode Space t b</p> Doom Font variables <p>Doom exposes five (optional) variables for controlling fonts in Doom:</p> <ul> <li>`doom-font' -- the primary font to use</li> <li>`doom-variable-pitch-font' -- a non-monospace font (where applicable)</li> <li><code>doom-big-font' -- used for</code>doom-big-font-mode'; use this for presentations or streaming.</li> <li>`doom-unicode-font' -- for unicode glyphs</li> <li><code>doom-serif-font' -- for the</code>fixed-pitch-serif' face</li> </ul> <p>'C-h v doom-font' for documentation and more examples of what they accept. For example:</p>"},{"location":"install/doom-configuration/#treemacs","title":"Treemacs","text":"<p>Preview files when navigating file names in treemacs</p> <p>Not used by practicalli/doom-emacs-config</p> .config/doom/config.el<pre><code>;; Not currently used in practicalli/doom-emacs-config\n(map! :map treemacs-mode-map\n      \"&lt;down&gt;\" (lambda (&amp;optional arg) (interactive)\n                 (next-line arg)\n                 (save-selected-window\n                   (treemacs-RET-action)))\n      \"&lt;up&gt;\" (lambda (&amp;optional arg) (interactive)\n               (previous-line arg)\n               (save-selected-window\n                 (treemacs-RET-action))))\n</code></pre>"},{"location":"install/doom-configuration/#version-control","title":"Version control","text":"<p>Magit Forge will use encrypted developer tokens stored in authinfo.gpg to access GitHub / GitLab API, to manage issues and pull requests.</p> <pre><code>(setq auth-sources (list\n                    (concat (getenv \"XDG_CONFIG_HOME\") \"/authinfo.gpg\")\n                    \"~/.authinfo.gpg\"))\n</code></pre>"},{"location":"install/doom-configuration/#format-tools","title":"Format tools","text":"<p>Markdown</p> <p>Space : <code>+format/buffer</code></p> <pre><code>sudo npm install markdownlint\n</code></pre>"},{"location":"install/doom-configuration/#indent","title":"Indent","text":"<p>TAB with cursor at start of a line will indent the line, any other position on the line it will try to insert a tab</p> <p>Configure TAB to always indent the line, no matter the column position</p> <pre><code>(setq tab-always-indent 'complete)\n</code></pre>"},{"location":"install/doom-configuration/#whitespace-cleanup","title":"Whitespace cleanup","text":"<p>Space c w deletes whitespace at end of lines</p> <p>Space c ++W++ deletes whitespace at end of lines</p> <p>Automating whitespace cleanup seems very limited and requires external format tools which may also use a number of format rules that may or may not be of value.</p> Format module requires format tools <p>Doom does not have the capability to remove whitespace by itself</p> <p>Enable the <code>format</code> module with the <code>+onsave</code> option to call the respective format tool</p> .config/doom/init.el<pre><code>(format +onsave)\n</code></pre> <p>Install the format Command Line tools</p> <ul> <li>Prettier - Markdown and others...</li> </ul> <pre><code>sudo npm install --global prettier\n</code></pre> Prettier has very limited Markdown rule configuration <p>Prettier only has one configuration option, whether to wrap lines.  It is not possible to configure any rules as with MarkdownLint.</p>"},{"location":"install/doom-configuration/#docker-support","title":"Docker support","text":"<p><code>(docker +lsp)</code> for Docker module with LSP support, providing Dockerfile lint and syntax support</p> <p>LSP server binary provided by <code>dockerfile-language-server-nodejs</code> package</p> <pre><code>sudo npm install --global dockerfile-language-server-nodejs\n</code></pre> <p>This module assumes <code>docker</code>, <code>docker-compose</code> and =docker-machine= binaries are installed and accessible from your PATH.</p>"},{"location":"install/doom-configuration/#performance-tweaks","title":"Performance tweaks","text":"<p>Configuration files for doom start with lexical binding which has performance advantages.</p> .config/doom/+clojure.el<pre><code>;;; +clojure.el -*- lexical-binding: t; -*-\n</code></pre> <ul> <li>Performance advantages of lexical scope</li> </ul>"},{"location":"install/evil-configuration/","title":"Evil configuration","text":""},{"location":"install/evil-configuration/#map-evil-keys","title":"Map Evil keys","text":"<p>Key bindings to surround text with parens and other pairs</p> <pre><code>(after! evil-surround\n  (let ((pairs '((?g \"$\" . \"$\") \n                 (?h \"(\" . \")\") \n                 (?j \"[\" . \"]\") \n                 (?k \"{\" . \"}\") \n                 (?l \"&lt;\" . \"&gt;\") \n                 (?\u00f8 \"'\" . \"'\") \n                 (?\u00e6 \"\\\"\" . \"\\\"\"))))\n    (prependq! evil-surround-pairs-alist pairs)\n    (prependq! evil-embrace-evil-surround-keys (mapcar #'car pairs))))\n</code></pre>"},{"location":"install/pre-install/","title":"Pre-install","text":"<p>Spacemacs is a configuration for Emacs, so naturally Emacs should be installed before Spacemacs can be used.</p> <p>Clojure CLI should be installed to support Clojure development, along with several supporting development tools.</p> <p>Command Line Tools support searching for files and spell checking.</p>"},{"location":"install/pre-install/#install-emacs","title":"Install Emacs","text":"<p>Emacs 28 is recommended as it includes native compilation support and optomised JSON support which is valuable for Language Server Protocol servers.</p> <p>Emacs is available for Linux, MacOSX and Windows.  The Spacemacs Readme suggested ways to install Emacs</p> Emacs Version 28 recommended <p>Emacs 28 is recommended with native compilation of Elisp, which can have a significant improvement on Emacs package performance. Emacs 27.1 is the minimum version supported by Practicalli Spacemacs</p> Ubuntu / DebianHomebrew / MacOSXWindowsMsys2 <p><code>apt-cache show emacs</code> to check available versions of Emacs in the Ubuntu package manager. If version 28 is available, install Emacs using the Ubuntu package manager.</p> <pre><code>sudo apt install emacs\n</code></pre> <p>Additional versions of Emacs are available via the Ubuntu Emacs Team Personal Package Archive.</p> <p><code>sudo apt install emacs-snapshot</code> package to use the latest nightly build of Emacs, although be aware that some things may break.</p> Build Emacs 28 from source <p>Building Emacs 28 from source code on Ubuntu is relatively straight forward task, although it will take a little time to compile.  Building Emacs allows customisation of some features, such as native compilatin of elisp to enhance the performance of Emacs.</p> <p>Emacs Plus from Homebrew provides many options, including native compilation and Spacemacs Icon for application launchers.</p> <pre><code>brew tap d12frosted/emacs-plus`\nbrew install emacs-plus@28 --with-native-comp --with-spacemacs-icon\n</code></pre> <p>Emacs.app is installed to: <code>/usr/local/opt/emacs-plus@28</code></p> <p>Optionally run Emacs plus as a service <pre><code>brew services start d12frosted/emacs-plus/emacs-plus@28\n</code></pre></p> <p>Run <code>emacs</code></p> <p>Get a hot cup of something as Emacs native compilation compiles all the things.</p> <p>The Spacemacs README lists other options for MacOSX.</p> <p>Download Emacs-28.2 from the GNU repository and extract the zip file to <code>%AppData%/local/Programs/emacs</code>.</p> <p>Alternatively, if you are using the Chocolatey package manager then install Emacs version 28</p> <p>Add the Emacs directory to the <code>PATH</code> variable in your user account environment variables.</p> <p>To start Emacs run the command <code>runemacs.exe</code>.  You can also pin this to the start menu or task bar.</p> Access to common Unix tools <p>Command line tools, such as <code>diff</code>, are used by Emacs.  To have these command line tools available in Windows, install Emacs as above but then run emacs from a Unix shell such as GitBash.</p> <p>Install Emacs (64bits build) with the following:</p> <pre><code>pacman -S mingw-w64-x86_64-emacs\n</code></pre>"},{"location":"install/pre-install/#install-clojure-cli","title":"Install Clojure CLI","text":"<p>Practicalli Clojure Install Guide</p> <p>Clojure CLI provide a simple and configurable way to:</p> <ul> <li>Run Clojure programs and tools</li> <li>Run an interactive REPL (Read-Eval-Print Loop) and evaluate Clojure expressions, usually with a Clojure aware editor</li> <li>Managing dependencies (via tools.deps) from Maven and Git repositories</li> </ul> <p>Using community tools on top of Clojure CLI tools provides tasks to create, develop, build and deploy Clojure applications and services</p> <p>Follow the Practicalli Clojure Install Guide to install Clojure and supporting tools.</p>"},{"location":"install/pre-install/#command-line-tools","title":"Command Line Tools","text":"<p>Emacs uses several external command line tools.  There are some very efficient search tools that are recommended (ripgrep, silver searcher).</p> <p>Consider installing these tools to enhance your Spacemacs experience.</p>"},{"location":"install/pre-install/#spell-check","title":"spell check","text":"<p>spell-checking layer in Spacemacs supports ispell, hunspell, and aspell command line tools. Aspell is the recommended spell checking tool.</p> Ubuntu / DebianHomebrewManual <p>Aspell binary is usually installed on Unix systems by default.  Use <code>sudo apt instal aspell</code> if not already present.</p> <p><code>brew install aspell</code></p> <p>Aspell Install</p>"},{"location":"install/pre-install/#text-search","title":"Text search","text":"<p>Search text buffers uses an external search tool. Although grep is available in most operating systems, ripgrep (rg) or silver-searcher (ag) offer far greater performance and have more search options.</p> <p><code>dotspacemacs-search-tools '(\"rg\" \"ag\" \"pt\" \"ack\" \"grep\")</code> in the Spacemacs configuration defines the order of preference for the search tool to use.</p> <p>ripgrep (rg) Silver Searcher (ag)</p>"},{"location":"install/pre-install/#find-files","title":"Find files","text":"<p>Space p opens the projectile menu for finding files relative to the current project.  Projectile uses the external command line tool <code>find</code> to index files that are not part of a version controlled project (using <code>git</code> for projects versioned with Git).</p> <p><code>fd</code> is an external command line binary that is faster than the <code>find</code> command.  If installed, projectile will automatically use <code>fd</code> instead of <code>find</code></p> <p>fd install instructions by operating system </p>"},{"location":"install/pre-install/#helm-locate","title":"helm-locate","text":"<p>The <code>locate</code> binary is used by Space f L (<code>helm-locate</code>) to find files and directories on the operating system file space.</p> <p><code>helm-locate</code> is the fastest way to search for files across the whole file space on your computer as it uses the updatedb database.  If a file was very recently added to the file system, run <code>sudo updatedb</code> to ensure all files are in the database.</p> Ubuntu / DebianHomebrew / MacOSX <pre><code>sudo apt install locate\n</code></pre> <p>findutils Homebrew findutils <pre><code>brew install findutils\n</code></pre></p>"},{"location":"introduction/contributing/","title":"Contributing to Practicalli","text":"<p>Practicalli books are written in markdown and use MkDocs to generate the published website via a GitHub workflow.  MkDocs can also run a local server using the <code>make docs</code> target from the <code>Makefile</code></p> <p>By submitting content ideas and corrections you are agreeing they can be used in this workshop under the Creative Commons Attribution ShareAlike 4.0 International license.  Attribution will be detailed via GitHub contributors.</p> <p>All content and interaction with any persons or systems must be done so with respect and within the Practicalli Code of Conduct.</p>"},{"location":"introduction/contributing/#book-status","title":"Book status","text":""},{"location":"introduction/contributing/#submit-and-issue-or-idea","title":"Submit and issue or idea","text":"<p>If something doesnt seem quite right or something is missing from the book, please raise an issue via the GitHub repository explaining in as much detail as you can.</p> <p>Raising an issue before creating a pull request will save you and the maintainer time.</p>"},{"location":"introduction/contributing/#considering-a-pull-request","title":"Considering a Pull request?","text":"<p>Pull Request Commits must be cryptographically signed</p> <p>All commits contributed to Practicalli must be signed via a legitimate SSH or GPG key to avoid the risk of commit spoofing.</p> <p>Configure commit signing with SSH key - Practicalli Engineering</p> <p>All pull requests must include an entry in CHANGELOG.md or will not be merged.  A changelog entry allows the community to follow the changes to the book.</p> <p>Each pull request will have a number of CI workflows run against the contribution, checking the format of the content and if a changelog entry has been provided.</p> <p>Please keep pull requests small and focused, as they are much quicker to review and easier to accept.  Ideally PR's should be for a specific page or at most a section.</p> <p>A PR with a list of changes across different sections will be closed without merging as these take considerable time to review.</p> <p>Issues such as grammar improvements are typically a sign of a rushed section that requires a rewrite, so a pull request to fix a typeographic error will probably not be merged.  Raise an issue, or post a thread in the  Clojurians Slack #practicall channel</p>"},{"location":"introduction/contributing/#thank-you-to-everyone-that-has-contributed","title":"Thank you to everyone that has contributed","text":"<p>A huge thank you to Rich Hickey and the team at Cognitect for creating and continually guiding the Clojure language.  Special thank you to Alex Miller who has provided excellent advice on working with Clojure and the CLI tooling.</p> <p>The Clojure community has been highly supportive of everyone using Clojure and I'd like to thank everyone for the feedback and contributions.  I would also like to thank everyone that has joined in with the London Clojurins community, ClojureBridgeLondon, Clojurians Slack community, Clojurians Zulip community and Clojureverse community.</p> <p>Thank you to everyone who sponsors the Practicalli websites and videos and for the Clojurists Together sponsorship, it helps me continue the work at a much faster pace.</p> <p>Special thanks to Bruce Durling for getting me into Cloure in the first place.</p> <p></p>"},{"location":"introduction/repl-workflow/","title":"REPL Driven Development","text":"<p>Always be REPL'ing</p> <p>Coding without a REPL feels limiting. The REPL provides fast feedback from code as its crafted, testing assumptions and design choices every step of the journey to a solution  - John Stevenson, Practical.li</p> <p>Clojure is a powerful, fun and highly productive language for developing applications and services.  The clear language design is supported by a powerful development environment known as the REPL (read, evaluate, print, loop).  The REPL gives you instant feedback on what your code does and enables you to test either a single expression or run the whole application (including tests).</p> <p>REPL driven development is the foundation of working with Clojure effectively</p> <p>An effective Clojure workflow begins by running a REPL process.  Clojure expressions are written and evaluated immediately to provide instant feedback. The REPL feedback helps test the assumptions that are driving the design choices.</p> <ul> <li>Read - code is read by the Clojure reader, passing any macros to the macro reader which converts those macros into Clojure code.</li> <li>Evaluate - code is compiled into the host language (e.g. Java bytecode) and executed</li> <li>Print - results of the code are displayed, either in the REPL or as part of the application.</li> <li>Loop - the REPL is a continuous process that evaluates code, either a single expression or the whole application.</li> </ul> <p>Design decisions and valuable data from REPL experiments can be codified as specifications and unit tests</p> <p>Practicalli REPL Reloaded Workflow</p> <p>The principles of REPL driven development are implemented in practice using the Practicalli REPL Reloaded Workflow and supporting tooling.  This workflow uses Portal to inspect all evaluation results and log events, hot-load libraries into the running REPL process and reloads namespaces to support major refactor changes.</p>"},{"location":"introduction/repl-workflow/#evaluating-source-code","title":"Evaluating source code","text":"<p>A REPL connected editor is the primary tool for evaluating Clojure code from source code files, displaying the results inline.</p> <p>ource code is automatically evaluated in its respective namespace, removing the need to change namespaces in the REPL with (<code>in-ns</code>) or use fully qualified names to call functions.</p> <p>Evaluate Clojure in Practicalli Doom Emacs Config</p> <p><code>, e f</code> evaluates the top level form under the cursor</p> <p><code>, e e</code> evaluated the expression immediately before the cursor (useful for evaluating nested expressions)</p> <p><code>, e b</code> evaluates the whole buffer (expressions within the comment form or prefixed with <code>#_</code> reader comment are not evaluated)</p> <p> </p> <p>Hint</p> <p><code>, e ;</code> (<code>cider-eval-defun-to-comment</code>) evaluates the current form and prints the result under the expression as a comment</p> <p>Adding result comment is an effective way to show the expected results of the code design, especially as a journal.</p> Evaluate Clojure in a Terminal UI REPL <p>Entering expressions at the REPL prompt evaluates the expression immediately, returning the result directly underneath  </p>"},{"location":"introduction/repl-workflow/#rich-comment-blocks-living-documentation","title":"Rich Comment blocks - living documentation","text":"<p>The <code>(comment ,,,)</code> function wraps code that is only run directly by the developer using a Clojure aware editor.</p> <p>Expressions in rich comment blocks can represent how to use the functions that make up the namespace API.  For example, starting/restarting the system, updating the database, etc.  Expressions provide examples of calling functions with typical arguments and make a project more accessible and easier to work with.</p> <p>Clojure Rich Comment to manage a service</p> <pre><code>(ns practicalli.gameboard.service)\n\n(defn app-server-start [port] ,,,)\n(defn app-server-start [] ,,,)\n(defn app-server-restart [] ,,,)\n\n(defn -main\n  \"Start the service using system components\"\n  [&amp; options] ,,,)\n\n(comment\n  (-main)\n  (app-server-start 8888)\n  (app-server-stop)\n  (app-server-restart 8888)\n\n  (System/getenv \"PORT\")\n  (def environment (System/getenv))\n  (def system-properties (System/getProperties))\n  ) ; End of rich comment block\n</code></pre> <p>Rich comment blocks are very useful for rapidly iterating over different design decisions by including the same function but with different implementations.  Hide clj-kondo linter warnings for redefined vars (<code>def</code>, <code>defn</code>) when using this approach.</p> <pre><code>;; Rich comment block with redefined vars ignored\n#_{:clj-kondo/ignore [:redefined-var]}\n(comment\n  (defn value-added-tax []\n    ;; algorithm design - first idea)\n\n  (defn value-added-tax []\n    ;; algorithm design - second idea)\n\n  ) ;; End of rich comment block\n</code></pre> <p>The \"Rich\" in the name is an honourary mention to Rich Hickey, the author and benevolent dictator of Clojure design.</p>"},{"location":"introduction/repl-workflow/#design-journal","title":"Design Journal","text":"<p>A journal of design decisions makes the code easier to understand and maintain.  Code examples of design decisions and alternative design discussions are captured, reducing the time spent revisiting those discussions.</p> <p>Journals simplify the developer on-boarding processes as the journey through design decisions are already documented.</p> <p>A Design Journal is usually created in a separate namespace, although it may start as a rich comment at the bottom of a namespace.</p> <p>A journal should cover the following aspects</p> <ul> <li>Relevant expressions use to test assumptions about design options.</li> <li>Examples of design choices not taken and discussions why (saves repeating the same design discussions)</li> <li>Expressions that can be evaluated to explain how a function or parts of a function work</li> </ul> <p>The design journal can be used to create meaningful documentation for the project very easily and should prevent time spent on repeating the same conversations.</p> <p>Example design journal</p> <p>Design journal for TicTacToe game using Reagent, ClojureScript and Scalable Vector Graphics</p>"},{"location":"introduction/repl-workflow/#viewing-data-structures","title":"Viewing data structures","text":"<p>Pretty print shows the structure of results from function calls in a human-friendly form, making it easier for a developer to parse and more likely to notice incorrect results.</p> <p>, e p on the Clojure menu has several commands to Pretty Print data structure results when evaluating code.</p> <p>, d v is the Cider Inspect menu for paging through very large data sets and navigate nested data structures in detail.</p> <p></p> <p>, d is the Cider debug menu which can inspect view intermediate values and data structures during the debugging of Clojure function calls.</p> <p>Tools to view and navigate code</p> <ul> <li> Cider inspector is an effective way to navigate nested data and page through large data sets.</li> <li> Portal Inspector to visualise many kinds of data in many different forms.</li> </ul> <p></p>"},{"location":"introduction/repl-workflow/#code-style-and-idiomatic-clojure","title":"Code Style and idiomatic Clojure","text":"<p>Clojure aware editors should automatically apply formatting that follows the  Clojure Style guide.</p> <p>Live linting with clj-kondo suggests common idioms and highlights a wide range of syntax errors as code is written, minimizing bugs and therefore speeding up the development process.</p> <p> </p> <p>Clojure LSP is build on top of clj-kondo</p> <p> Clojure LSP uses clj-kondo static analysis to provide a standard set of development tools (format, refactor, auto-complete, syntax highlighting, syntax &amp; idiom warnings, code navigation, etc).</p> <p>Clojure LSP can be used with any Clojure aware editor that provides an LSP client, e.g.  Spacemacs,  Doom Emacs,  Neovim, VSCode.</p> <p>Clojure Style Guide</p> <p>The  Clojure Style guide provides examples of common formatting approaches, although the development team should decide which of these to adopt.  Emacs <code>clojure-mode</code> will automatically format code and so will Clojure LSP (via cljfmt).  These tools are configurable and should be tailored to the teams standard.</p>"},{"location":"introduction/repl-workflow/#data-and-function-specifications","title":"Data and Function specifications","text":"<p> Clojure spec is used to define a contract on incoming and outgoing data, to ensure it is of the correct form.</p> <p>As data structures are identified in REPL experiments, create data specification to validate the keys and value types of that data.</p> <pre><code>;; ---------------------------------------------------\n;; Address specifications\n(spec/def ::house-number string?)\n(spec/def ::street string?)\n(spec/def ::postal-code string?)\n(spec/def ::city string?)\n(spec/def ::country string?)\n(spec/def ::additional string?)\n\n(spec/def ::address   ; Composite data specification\n  (spec/keys\n   :req-un [::street ::postal-code ::city ::country]\n   :opt-un [::house-number ::additional]))\n;; ---------------------------------------------------\n</code></pre> <p>As the public API is designed, specifications for each functions arguments are added to validate the correct data is used when calling those functions.</p> <p> Generative testing provides a far greater scope of test values used incorporated into unit tests. Data uses clojure.spec to randomly generate data for testing on each test run.</p>"},{"location":"introduction/repl-workflow/#test-driven-development-and-repl-driven-development","title":"Test Driven Development and REPL Driven Development","text":"<p>Test Driven Development (TDD) and REPL Driven Development (RDD) complement each other as they both encourage incremental changes and continuous feedback.</p> <p>Test Driven Development fits well with Hammock Time, as good design comes from deep thought</p> <ul> <li>RDD enables rapid design experiments so different approaches can easily and quickly be evaluated .</li> <li>TDD focuses the results of the REPL experiments into design decisions, codified as unit tests.  These tests guide the correctness of specific implementations and provide critical feedback when changes break that design.</li> </ul> <p> Unit tests should support the public API of each namespace in a project to help prevent regressions in the code.  Its far more efficient in terms of thinking time to define unit tests as the design starts to stabilize than as an after thought.</p> <p><code>clojure.test</code> library is part of the Clojure standard library that provides a simple way to start writing unit tests.</p> <p> Clojure spec can also be used for generative testing, providing far greater scope in values used when running unit tests.  Specifications can be defined for values and functions.</p> <p>Clojure has a number of  test runners available.  Kaocha is a test runner that will run unit tests and function specification checks.</p> <p>Automate local test runner</p> <p>Use  kaocha test runner in watch mode to run tests and specification check automatically (when changes are saved) <pre><code>clojure -X:test/watch\n</code></pre></p>"},{"location":"introduction/repl-workflow/#continuous-integration-and-deployment","title":"Continuous Integration and Deployment","text":"<p>Add a  continuous integration service to run tests and builds code on every shared commit.  Spin up testable review deployments when commits pushed to a pull request branch, before pushing commits to the main deployment branch, creating an effective pipeline to gain further feedback.</p> <ul> <li> CircleCI provides a simple to use service that supports Clojure projects.</li> <li> GitHub Workflows and GitHub actions marketplace to quickly build a tailored continuous integration service, e.g. Setup Clojure GitHub Action.</li> <li> GitLab CI</li> </ul> <p></p>"},{"location":"introduction/repl-workflow/#live-coding-with-data-stuart-halloway","title":"Live Coding with Data - Stuart Halloway","text":"<p>There are few novel features of programming languages, but each combination has different properties. The combination of dynamic, hosted, functional and extended Lisp in Clojure gives developers the tools for making effective programs. The ways in which Clojure's unique combination of features can yield a highly effective development process.</p> <p>Over more than a decade we have developed an effective approach to writing code in Clojure whose power comes from composing many of its key features. As different as Clojure programs are from e.g. Java programs, so to can and should be the development experience. You are not in Kansas anymore!</p> <p>This talk presents a demonstration of the leverage you can get when writing programs in Clojure, with examples, based on my experiences as a core developer of Clojure and Datomic.</p> <p> </p>"},{"location":"introduction/spacemacs-to-doom/","title":"Migrate from Spacemacs to Doom Emacs","text":"<p>The major differences between Spacemacs and Doom Emacs</p> <ul> <li>Key bindings</li> <li>Completion framework (vertico rather than helm)</li> <li>Spacemacs added touches (Doom has a minimal approach)</li> </ul>"},{"location":"introduction/spacemacs-to-doom/#key-bindings","title":"Key bindings","text":"<p>practicalli/doom-emacs-config</p> <p>practicalli/doom-emacs-config changes many Doom Emacs key bindings to Spacemacs bindings to easy usability of Doom Emacs.  The more familiar the key binding experience, the simpler it is to adopt Doom Emacs.</p> <p>Not all key bindings have been changed and some of the Doom Emacs defaults are adopted (either because they feel easy to adopt or it is not clear how to change them effectively)</p>"},{"location":"introduction/spacemacs-to-doom/#doom-vim-style-bindings","title":"Doom Vim-style bindings","text":"<p>Doom key bindings tend to follow vim-style movement for the basic operation of Emacs</p> <p>Space : for <code>M-x</code> to show a list of alll Emacs commands</p> <p>Space w s / v to split a window horizontally / vertical split</p> <p>Space w h / j / k / l to move cursor to window left, down, up right (with captial versions moving the window rather than cursor)</p>"},{"location":"introduction/spacemacs-to-doom/#major-changes","title":"Major changes","text":"<p>The +bindings.el configuration file makes changes to the general use of Doom Emacs</p> <p>, is mapped as the local leader, Space remains the leader key (common to both Doom and Spacemacs)</p> <p>Space Tab bound to toggle to last buffer</p> <p>Space l replaces Space Tab as the workspace menu, Space l Tab added to toggle to last workspace</p> <p>Space b h added to jump to home buffer</p> <p>Space Space used as Meta+x although the default Space : Doom Emacs binding is kept</p>"},{"location":"introduction/spacemacs-to-doom/#file-diff","title":"File diff","text":"<p><code>SPC D</code> is the Spacemacs diff menu</p> <p>Doom has no menu for diff that I can find, although there are a few Emacs key bindings</p> <p><code>SPC d</code> menu provides key bindings for diff, ediff, ediff3, vc-root-diff and vc-diff.  Menu included in practicalli/doom-emacs-config</p>"},{"location":"introduction/spacemacs-to-doom/#magit-status","title":"Magit Status","text":"<p>Space g s remaped to Magit Status buffer, although Doom default binding Space g s is kept</p> <p>Doom bindings that are different to Spacemacs and have not been changed in practicalli/doom-emacs-config</p> <p><code>ZZ</code> to close and commit message and create a commit (Spaceamcs <code>,,</code>)</p> <p><code>ZQ</code> to cancel the commit message (Spaceamcs <code>,k</code>)</p>"},{"location":"introduction/spacemacs-to-doom/#spacemacs-added-touches","title":"Spacemacs added touches","text":"<p>Things added in Spacemacs not available (or not the same) in Doom Emacs</p>"},{"location":"introduction/spacemacs-to-doom/#visual-select","title":"Visual select","text":"<p>Spacemacs:</p> <p><code>SPC v</code> to select and additional <code>v</code> to grow selection, <code>V</code> to shrink selection</p> <p>Doom: Use <code>o</code> to toggle between ends of selection and grow using vim motions</p> <p>TODO: discover other options and identify if there is a similar approach to Spacemacs <code>SPC v</code></p>"},{"location":"introduction/spacemacs-to-doom/#paste","title":"Paste","text":"<p>Spacemacs:</p> <p><code>p</code> shows the paste transient state menu, allowing for cycling the kill ring and pasting different values</p> <p>Doom: <code>p M-y</code> will paste the current value and use yank-pop to cycle through the kill ring</p> <p><code>SPC i y</code> inserts a value from the kill ring, showing a popup list of the history</p>"},{"location":"introduction/spacemacs-to-doom/#whitespace-clean-up","title":"Whitespace clean up","text":"<p>Spacemacs can be configured to automattically remove extra whitespace when saving a file.</p> <p>Doom: Space c w key binding removes extra whitespace</p> <p>TODO: automate whitespace removal on file save</p>"},{"location":"introduction/why-doom-emacs/","title":"Why Doom Emacs","text":"<p>Practicalli is evaluating Doom Emacs after many years of using Spacemacs (which is still the main Emacs configuration used)</p> <p>Reasons to select doom to date:</p> <ul> <li>Experience feels closer to using Neovim, so may be more of a bridge between Emacs and Neovim (help with adoption of Conjure)</li> <li>Vertico completion seems comparible to the features regularly used in other tools (Helm, Ivy)</li> <li>Package mangager pins specific versions of packages, so potentially more stability.  Managing versions of packages seems a litle simpler in Doom, although its only a small difference</li> <li>Minimal set of features and an optomised dashboard (similar to Neovim), so perception of faster start up, although saved session needs to be restored after startup.</li> <li>Startup speed - a few seconds to start up Emacs is perfectly fine for the Practicalli workflow, where Emacs typically stays running for weeks or months</li> </ul>"},{"location":"introduction/why-doom-emacs/#spacemacs-or-emacs-doom-configuations","title":"Spacemacs or Emacs Doom Configuations","text":"<p>Spacemacs and Doom Emacs are both open source projects that provide a large amount of common configuration in an easy to use way (typically with little or no Emacs Lisp knowledge required).</p> <p>Spacemacs includes far greater number of commands in its default install (via Emacs packages) and has far greater depth to its documentation.</p> <p>Doom Emacs contains only the essentials and documentation can be quite sparse in many places, so more searching and help from the community may be required.  Additional Emacs Lisp seems to be more prevelant in Doom Emacs.</p> <p>There are a nuber of common features between the two configurations:</p> <ul> <li>completion frameworks: Spacemacs uses Helm and Doom Emacs uses Vertico to achieve a common set of features (Helm has a greater number of feactures although they share common core)</li> <li>projectile project management</li> <li>Package abstraction: Spacemacs layers and Doom modules are used over individual Emacs packages</li> <li>package manager (Spacemacs: packages.el, Doom: straight.el)</li> <li>modelines and themes: Practicalli uses the same modeline and theme for Spacemacs and Doom Emacs</li> </ul>"},{"location":"introduction/why-doom-emacs/#migrating-from-spacemacs","title":"Migrating from Spacemacs","text":"<p>Challenging areas when adopting Doom Emacs initially</p> <ol> <li>key bindings (mnemonic and consistent key bindings used in Spacemacs are not consistent in Doom, although practicalli/doom-emacs-config adds back many of the most common Spacemacs key bindings.</li> <li>minimla features by default - Doom Emacs is minimal by design although contains modules (comparable to Spacemacs layers) that are easily added to greatly increase features</li> <li>learning the different tools that come with Doom (vertico, multiedit, etc) - similar features are provided by different modules and therefore different Emacs packages</li> <li>Documentation is sparse - built-in docs are good where they have been added, although many modules are undocumented and require investigation of the underlying package documentation</li> </ol>"},{"location":"introduction/why-doom-emacs/#is-doom-faster-than-other-emacs-configurations","title":"Is Doom faster than other Emacs configurations","text":"<p>Startup time was specifically optomised in Doom Emacs and it only opens a minimal dashboard buffer, giving an experience comparable to Neovim.  Session state is not loaded by default when starting Emacs, although there is a command on the dashboard to restore the session.</p> <p>Factor in the restor of state in startup time, there is very little difference between a default install of Doom Emacs or Spacemacs.</p> <p>Practicalli hasnt experienced a noticable performance difference with Doom, as the vast majority of code is in the shared packages that are used by Doom and other projects.</p> <p>Any configuration that is adopted will be slow to use initially, especially if it is unfamiliar.  Before changing the key bindings I found Doom slower to use as it does not provide a full set of mnemonic key bindings I was used to and was therefore less intuitive to used compared to Spacemacs.</p> <p>The Doom Emacs Clojure module key bindings have been reboud in by Practicalli to extend the commands available.</p> <p>Quote</p> <p>The slowest part of the workflow is the person operating the tool.  When interation with a tool doesnt flow smoothly, the speed of the tool becomes largely irrelevant - John Stevenson</p>"},{"location":"introduction/writing-tips/","title":"Writing tips for MkDocs","text":"<p>Making the docs more engaging using the mkdocs-material theme reference guide</p> Configuring Colors <p>Material for MkDocs - Changing the colors lists the primary and accent colors available.</p> <p>HSL Color Picker for codes to modify the theme style, overriding colors in <code>docs/assets/stylesheets/extra.css</code></p>"},{"location":"introduction/writing-tips/#hypertext-links","title":"Hypertext links","text":"<p>Links open in the same browser window/tab by default.</p> <p>Add <code>{target=_blank}</code> to the end of a link to configure opening in a new tab</p> <pre><code>[link text](url){target=_blank}\n</code></pre>"},{"location":"introduction/writing-tips/#buttons","title":"Buttons","text":"<p>Convert any link into a button by adding <code>{.md-button}</code> class names to end of the markdown for a link, which uses <code>.md-button-primary</code> by default.  Include <code>target=_blank</code> for buttons with links to external sites.</p> <pre><code>[link text](http://practical.li/blog){.md-button target=_blank}\n</code></pre> <p>Or specify a different class</p> <pre><code>[link text](http://practical.li/blog){.md-button .md-button-primary}\n</code></pre> <p>Add an icon to the button</p> <p> Practicalli Issues  Practicalli Blog</p> <pre><code>[:fontawesome-brands-github: Practicalli Issues](http://practical.li/blog){ .md-button .md-button-primary }\n[:octicons-heart-fill-24: Practicalli Blog](http://practical.li/blog){ .md-button .md-button-primary }\n</code></pre> <p>Search all supported icons</p>"},{"location":"introduction/writing-tips/#youtube-video","title":"YouTube video","text":"<p>Use an iframe element to include a YouTube video, wrapping in a paragraph tag with center alignment to place the video in a centered horizontal position</p> <pre><code>&lt;p style=\"text-align:center\"&gt;\n&lt;iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rQ802kSaip4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/p&gt;\n</code></pre> <p>mkdocs material does not have direct support for adding a YouTube video via markdown.</p>"},{"location":"introduction/writing-tips/#admonitions","title":"Admonitions","text":"<p>Supported admonition types</p> <p>Note</p> <p>Use <code>!!!</code> followed by <code>NOTE</code></p> <p>Adding a title</p> <p>Use <code>!!!</code> followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p> <p>Shh, no title bar just the text... Use <code>!!!</code> followed by <code>NOTE</code> and a <code>\"\"</code> empty double quotes</p> <p>Abstract</p> <p>Use <code>!!!</code> followed by <code>ABSTRACT</code></p> <p>Info</p> <p>Use <code>!!!</code> followed by <code>INFO</code></p> <p>Tip</p> <p>Use <code>!!!</code> followed by <code>TIP</code></p> <p>Success</p> <p>Use <code>!!!</code> followed by <code>SUCCESS</code></p> <p>Question</p> <p>Use <code>!!!</code> followed by <code>QUESTION</code></p> <p>Warning</p> <p>Use <code>!!!</code> followed by <code>WARNING</code></p> <p>Failure</p> <p>Use <code>!!!</code> followed by <code>FAILURE</code></p> <p>Danger</p> <p>Use <code>!!!</code> followed by <code>DANGER</code></p> <p>Bug</p> <p>Use <code>!!!</code> followed by <code>BUG</code></p> <p>Example</p> <p>Use <code>!!!</code> followed by <code>EXAMPLE</code></p> <p>Quote</p> <p>Use <code>!!!</code> followed by <code>QUOTE</code></p>"},{"location":"introduction/writing-tips/#collapsing-admonitions","title":"Collapsing admonitions","text":"Note <p>Collapse those admonitions using <code>???</code> instead of <code>!!!</code></p> Replace with a title <p>Use <code>???</code> followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p> Expanded by default <p>Use <code>???+</code>, note the <code>+</code> character,  followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p>"},{"location":"introduction/writing-tips/#inline-blocks","title":"Inline blocks","text":"<p>Inline blocks of text to make a very specific callout within text</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Adding something to then end of text is probably my favourite</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"introduction/writing-tips/#code-blocks","title":"Code blocks","text":"<p>Code blocks include a copy icon automatically</p> <p>Syntax highlighting in code blocks</p> <pre><code>(defn my-function  ; Write a simple function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map inc [1 2 3]))\n</code></pre> <p>Give the code block a title using <code>title=\"\"</code> after the backtics and language name</p> src/practicalli/gameboard.clj<pre><code>(defn my-function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map inc [1 2 3]))\n</code></pre> <p>We all like line numbers, especially when you can set the starting line</p> src/practicalli/gameboard.clj<pre><code>(defn my-function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map inc [1 2 3]))\n</code></pre> <p>Add <code>linenums=42</code> to start line numbers from 42 onward</p> <pre><code>clojure linenums=\"42\" title=\"src/practicalli/gameboard.clj\"\n</code></pre>"},{"location":"introduction/writing-tips/#annotations","title":"Annotations","text":"<p>Annotations in a code block help to highlight important aspects.  Use the comment character for the language followed by a space and a number in brackets</p> <p>For example, in a shell code block, use <code># (1)</code> where 1 is the number of the annotation</p> <p>Use a number after the code block to add the text for the annotation, e.g. <code>1.</code>. Ensure there is a space between the code block and the annotation text.</p> <pre><code>ls -la $HOME/Downloads  # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted text, images, ... basically anything that can be written in Markdown.</li> </ol> <p>Code blocks with annotation, add <code>!</code> after the annotation number to suppress the <code>#</code> character</p> <pre><code>(defn helper-function\n  \"Doc-string with description of function purpose\" ; (1)!\n  [data]\n  (merge {:fish 1} data)\n  )\n</code></pre> <ol> <li>Always include a doc-string in every function to describe the purpose of that function, identifying why it was added and what its value is.</li> </ol> <p>GitHub action example with multiple annotations</p> <pre><code>name: ci # (1)!\non:\n  push:\n    branches:\n      - master # (2)!\n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: pip install mkdocs-material # (3)!\n      - run: mkdocs gh-deploy --force\n</code></pre> <ol> <li> <p>You can change the name to your liking.</p> </li> <li> <p>At some point, GitHub renamed <code>master</code> to <code>main</code>. If your default branch     is named <code>master</code>, you can safely remove <code>main</code>, vice versa.</p> </li> <li> <p>This is the place to install further [MkDocs plugins] or Markdown     extensions with <code>pip</code> to be used during the build:</p> <pre><code>pip install \\\n  mkdocs-material \\\n  mkdocs-awesome-pages-plugin \\\n  ...\n</code></pre> </li> </ol>"},{"location":"introduction/writing-tips/#highlight-lines-in-code-blocks","title":"Highlight lines in code blocks","text":"<p>Add highlight line meta data to a code block after the opening backticks and code block language.</p> <p><code>hl_lines=\"2\"</code> highlights line 2 in the codeblock</p> <pre><code>(defn my-function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map\n   inc\n   [1 2 3]))\n</code></pre>"},{"location":"introduction/writing-tips/#embed-external-files","title":"Embed external files","text":"<p><code>--8&lt;--</code> in a code block inserts code from a source code file or other text file</p> <p>Specify a local file from the root of the book project (the directory containing mkdocs.yml)</p> Scheduled Version Check GitHub Workflow from source code file scheduled version check<pre><code>\n</code></pre> Practicalli Project Templates Emacs project configuration - .dir-locals.el<pre><code>((clojure-mode . ((cider-preferred-build-tool . clojure-cli)\n                  (cider-clojure-cli-aliases . \":test/env:dev/reloaded\"))))\n</code></pre> <p>Code example reuse</p> <p>Use an embedded local or external file (URL) when the same content is required in more than one place in the book.</p> <p>An effective way of sharing code and configuration mutliple times in a book or across multiple books.</p>"},{"location":"introduction/writing-tips/#content-tabs","title":"Content tabs","text":"<p>Create in page tabs that can also be</p> <p>Setting up a project</p> Clojure CLILeiningen <pre><code>clojure -T:project/new :template app :name practicalli/gameboard\n</code></pre> <pre><code>lein new app practicalli/gameboard\n</code></pre> <p>Or nest the content tabs in an admonition</p> <p>Run a terminal REPL</p> Clojure CLILeiningen <pre><code>clojure -T:repl/rebel\n</code></pre> <pre><code>lein repl\n</code></pre>"},{"location":"introduction/writing-tips/#diagrams","title":"Diagrams","text":"<p>Neat flow diagrams</p> <p>Diagrams - Material for MkDocs</p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <p>UML Sequence Diagrams</p> <pre><code>sequenceDiagram\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <p>state transition diagrams</p> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre> <p>Class diagrams - not needed for Clojure</p> <p>Entity relationship diagrams are handy though</p> <pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  LINE-ITEM {\n    customer-name string\n    unit-price int\n  }\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre>"},{"location":"introduction/writing-tips/#keyboard-keys","title":"Keyboard keys","text":"<p>Represent key bindings with Keyboard keys. Each number and alphabet character has their own key.</p> <ul> <li>1 <code>++1++</code> for numbers</li> <li>l <code>++\"l\"++</code> for lowercase character</li> <li>U <code>++u++</code> for uppercase character or <code>++\"U\"++</code> for consistency</li> </ul> <p>Punctionation keys use their name</p> <ul> <li>Space <code>++spc++</code></li> <li>, <code>++comma++</code></li> <li>Left <code>++arrow-left++</code></li> </ul> <p>For key sequences, place a space between each keyboard character</p> <ul> <li>Space g s <code>++spc++ ++\"g\"++ ++\"s\"++</code></li> </ul> <p>For key combinations, use join they key identifies with a <code>+</code></p> <ul> <li>Meta+X <code>++meta+x++</code></li> <li>Ctrl+Alt+Del <code>++ctrl+alt+del++</code></li> </ul> <p>MkDocs keyboard keys reference</p>"},{"location":"introduction/writing-tips/#images","title":"Images","text":"<p>Markdown images can be appended with material tags to set the size of the image, whether to appear on light or dark theme and support lazy image loading in browsers</p> SizeLazy LoadingAlignTheme SpecificAll Image Attributes <p><code>{style=\"height:150px;width:150px\"}</code> specifies the image size <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){style=\"height:150px;width:150px\"}\n</code></pre></p> <p></p> <p><code>{loading=lazy}</code> specifies an image should lazily load in the browser <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png){loading=lazy}\n</code></pre></p> <p><code>{aligh=left}</code> or <code>{aligh=right}</code> specifies the page alignment of an image. <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){align=right}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){align=right}\n</code></pre></p> <p>  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p><code>![Kitty Logo](image/kitty-light.png#only-dark)</code> or <code>![Kitty Logo](image/kitty-light.png#only-light)</code>  specifies the theme the image should be shown, allowing different versions of images to be shown based on the theme. <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){style=\"height:150px;width:150px\"}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){style=\"height:150px;width:150px\"}\n</code></pre> Use the theme toggle in the top nav bar to see the icon change between light and dark.  </p> <p>Requires the color pallet toggle</p> <p>Alight right, lazy load and set image to 150x150</p> <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){align=right loading=lazy style=\"height:64px;width:64px\"}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){align=right loading=lazy style=\"height:64px;width:64px\"}\n</code></pre> <p>  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"introduction/writing-tips/#lists","title":"Lists","text":"<p>Task lists</p> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul> <p>Task List example</p> <pre><code>- [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n- [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [ ] Praesent sed risus massa\n- [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n</code></pre>"},{"location":"introduction/writing-tips/#tooltips","title":"Tooltips","text":"<p>The humble tool tip</p> <p>Hover me</p> <p>with references</p> <p>Hover me</p> <p>Icon tool tip with a title</p> <p></p>"},{"location":"introduction/writing-tips/#abreviations","title":"Abreviations","text":"<p>The HTML specification is maintained by the W3C.</p> <p>[HTML]: Hyper Text Markup Language [W3C]: World Wide Web Consortium</p>"},{"location":"introduction/writing-tips/#magic-links","title":"Magic links","text":"<p>MagicLink can auto-link HTML, FTP, and email links. It can auto-convert repository links (GitHub, GitLab, and Bitbucket) and display them in a more concise, shorthand format.</p> <p>Email Practicalli</p> <p>Practicalli Neovim</p>"},{"location":"version-control/","title":"Version Control","text":"<p>Space g s to open Magit Status, providing a buffer to stage changes, create commits, add remotes, push changes.</p> <p><code>@</code> Forge menu in Magit Status manages images and pull requests</p>"},{"location":"version-control/#setup-git-client","title":"Setup Git Client","text":""},{"location":"version-control/#authenticated-api-access","title":"Authenticated API access","text":""},{"location":"version-control/#references","title":"references","text":"<ul> <li>Magit Forge configuration for Gitlab</li> </ul>"},{"location":"version-control/magit/","title":"Magit Git client","text":"<p>Space g s to open magit status</p> <p>Magit Status buffer shows the status of the local and remote repository (when a remote is added)</p> <p>? to show the Magit Status help</p>"},{"location":"version-control/magit/#navigating-magit-status-buffer","title":"Navigating Magit Status buffer","text":"<p>j / k to navigate line by line</p> <p>[ / ] to navigate by section, depending on the type of section the cursor is located (hunk, file, status)</p> <p>Tab to toggle the expantion of the current sections. Shift Tab to toggle the expansion of all sections</p>"},{"location":"version-control/magit/#stage-changes","title":"Stage Changes","text":"<p>s to stage a file, hunk or visual selection, S to stage all unstaged changes.</p> <p>u to unstage a file, hunk or visual selection, U to unstage all staged changes.</p> <p>v j / k to select one or more lines within a hunk</p>"},{"location":"version-control/magit/#stash-changes","title":"Stash changes","text":"<p>Z to open the stash menu </p> Evil key binding shadows Magit z stash menu <p><code>z</code> in magit status buffer shows the Evil <code>z</code> menu rather than Magit stash menu, although there are some magit relevant commands in that menu.</p> <p>? to open magit-dispatch, showing the Magit top level menu. z now calls the Magit stash menu.  Or use Z </p> <p>Z z to stash all the staged and unstaged changes, prompting for a meaningful name for the stash (to help remember what is inside the stash)</p> <p>Z a applies (copies) the contents of the stash into the working directory, adding back staged and unstaged changes.  If the working copy has been modified since the stash, merge conflicts may occur and be highlighted in the magit status buffer.</p> <p>Z a as with apply but deletes the slash (unless there is a merge conflict and the stash is kept)</p> <p>Z a delected the current stash (under the cursor)</p>"},{"location":"version-control/magit/#commits","title":"Commits","text":"<p>c opens the commit menu</p> <ul> <li>c to create a new commit from the staged changes</li> <li>a to amend an existing commit with the staged changes</li> <li>e to extend a existing commit with the staged changes (skip editing the commit message)</li> </ul> <p>c opens the commit message buffer, using a commit message template if configured</p> <p>a opens the commit message buffer with the message from the current commit</p> <p>Z Z to create a new commit, including any changes maded to the commit message</p> <p>Z Q to abort the commit message</p> <p>Enter on a commit, e.g. in recent commit section, opens the commit details that shows the commit message, meta data and the changes (diff)</p>"},{"location":"version-control/magit/#changing-history","title":"Changing History","text":"<p>The latest commit can be ammended, extended, squashed from the C commit menu.</p> <p>O on a commit (in recent commits or log view)</p> <p>r rebase menu to change any part of the commit history</p>"},{"location":"version-control/magit/#remote-repositories","title":"Remote Repositories","text":"<p>M opens the remote menu</p> <p>a to add a remote, specifying the name for the remote, e.g. <code>practicalli</code></p> <p>r to rename an existing remote name, prompting to select the remote to rename</p> <p>C to configure an existing remote, i.e. to update the URL of the remote</p> <p>P opens the push menu, p to push all local changes to the remote repository (origin or what ever remote is set as the push default)</p> <p>F opens the pull menu, p to pull remote changes to the local repository, or u to pull from upstream, e to select the remote from those currently added.</p>"},{"location":"version-control/magit/#merge-conflicts","title":"Merge Conflicts","text":"<p>e on a conflicted file opens an ediff view, showing the original file on the left and the changes on the right, with a 3rd window at the bottom that contains the ediff commands.</p> <p>j / k to navigate by diff, moving the two main views in unison.</p> <p>a to retain the original text and update the change, or b to accept the new change into the original file</p> <p>Pushing changes regularly minimises the risk of merge conflicts</p>"},{"location":"version-control/magit/#todo-list","title":"TODO list","text":"<p>TODO: is the magit-todo list included in doom or does it need to be added as a package?</p>"},{"location":"version-control/magit/#reference","title":"reference","text":"<ul> <li>Magit key binding reference sheet - Doom discourse</li> </ul>"}]}